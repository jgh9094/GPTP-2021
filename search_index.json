[["index.html", "Supplemental Material for An Exploration of Exploration: Measuring the ability of lexicase selection to find obscure pathways Chapter 1 Introduction 1.1 About our supplemental material 1.2 Contributing authors", " Supplemental Material for An Exploration of Exploration: Measuring the ability of lexicase selection to find obscure pathways Jose Guadalupe Hernandez, Alexander Lalejini, and Charles Ofria 2021-07-26 Chapter 1 Introduction This is the supplemental material associated with our 2021 GPTP contribution entitled, An Exploration of Exploration: Measuring the ability of lexicase selection to find obscure pathways. Preprint forthcoming. 1.1 About our supplemental material This supplemental material is hosted on GitHub using GitHub pages. The source code and configuration files used to generate this supplemental material can be found in this GitHub repository. We compiled our data analyses and supplemental documentation into this nifty web-accessible book using bookdown. Our supplemental material includes the following: Data availability (Section 2) Guide for running our software (Section 3) Experiment analyses: Tournament selection versus lexicase selection (Section 4) Lexicase selection at a range of diagnostic cardinalities (Section 5) Increasing population size versus increasing generations (Section 6) Epsilon lexicase selection (Section 7) Down-sampled lexicase selection (Section 8) Down-sampled lexicase selection (increased population size) (Section 9) Cohort lexicase selection (Section 10) Cohort lexicase selection (increased population size) (Section 11) Novelty-lexicase selection (Section 13) 1.2 Contributing authors Jose Guadalupe Hernandez Alexander Lalejini Charles Ofria "],["data-availability.html", "Chapter 2 Data Availability 2.1 Source code 2.2 Experimental results", " Chapter 2 Data Availability 2.1 Source code The source code for this work is available on GitHub at https://github.com/jgh9094/GPTP-2021-Exploration-Of-Exploration. 2.2 Experimental results The data from our experiments are available online in an OSF repository (Lalejini and Hernandez 2021) at https://osf.io/xpjft/. References "],["compile-and-run-experiments.html", "Chapter 3 Compile and run experiments 3.1 Docker", " Chapter 3 Compile and run experiments Here, we provide a guide to compiling and running our experiments using our Docker image. Please file an issue on GitHub if something is unclear or does not work. 3.1 Docker Youll need Docker to follow this guide. This guide was written using Docker version 20.10.2, build 20.10.2-0ubuntu1~20.10.1. 3.1.1 Getting the right image Weve already built a Docker image for this project with everything needed to compile and run our code inside: https://hub.docker.com/repository/docker/amlalejini/gptp-2021-an-exploration-of-exploration You can pull our Docker image from DockerHub: docker pull amlalejini/gptp-2021-an-exploration-of-exploration Now, if you run docker image ls, you should see something like REPOSITORY TAG IMAGE ID CREATED SIZE amlalejini/gptp-2021-an-exploration-of-exploration latest d0f392bfe129 3 hours ago 2.67GB 3.1.2 Spinning up a container You can spin up a container with the image we just pulled from DockerHub, using docker run -it &lt;IMAGE&gt;. Note that &lt;IMAGE&gt; corresponds to the IMAGE ID field for the image we want to run with (which you can get from docker image ls). In this example, I would run: docker run -it d0f392bfe129 This will drop you inside a container made with the correct docker image. You can see everything thats been installed/included in the container by looking through this DockerFile. Most importantly, the container already has our GitHub repository and the correct version of the Empirical library included. Even more conveniently, weve already compiled the experiment for you (/opt/GPTP-2021-Exploration-Of-Exploration/dia_world). 3.1.3 Running inside the container Inside the container, navigate to /opt/GPTP-2021-Exploration-Of-Exploration and run ./dia_world. Done! Youre running the software used to conduct our experiments! To generate a configuration file (Dia.cfg), you can run ./dia_world --gen. You can also run ./dia_world --help for a list of configuration options. The executable will default to the parameters specified in a Dia.cfg file (in the same directory), but you can override any setting on the command line. E.g., ./dia_world -POP_SIZE 42 will configuration the population size to be 42. You can exit the container at any time with exit. 3.1.4 Copying content from the container To copy files out of the container to your local machine, use the docker cp command. "],["tournament-selection-vs-lexicase-selection.html", "Chapter 4 Tournament selection vs Lexicase selection 4.1 Overview 4.2 Analysis dependencies 4.3 Setup 4.4 Exploration diagnostic performance 4.5 Final Performance 4.6 Activation position coverage 4.7 Manuscript figures", " Chapter 4 Tournament selection vs Lexicase selection 4.1 Overview # Relative location of data. working_directory &lt;- &quot;experiments/2021-05-27-tournament/analysis/&quot; # working_directory &lt;- &quot;./&quot; # Settings for visualization cb_palette &lt;- &quot;Set2&quot; # Create directory to dump plots dir.create(paste0(working_directory, &quot;imgs&quot;), showWarnings=FALSE) 4.2 Analysis dependencies library(ggplot2) library(tidyverse) library(knitr) library(cowplot) library(viridis) library(RColorBrewer) library(rstatix) library(ggsignif) library(Hmisc) library(kableExtra) source(&quot;https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R&quot;) These analyses were conducted in the following computing environment: print(version) ## _ ## platform x86_64-pc-linux-gnu ## arch x86_64 ## os linux-gnu ## system x86_64, linux-gnu ## status ## major 4 ## minor 1.0 ## year 2021 ## month 05 ## day 18 ## svn rev 80317 ## language R ## version.string R version 4.1.0 (2021-05-18) ## nickname Camp Pontanezen 4.3 Setup data_loc &lt;- paste0( working_directory, &quot;data/timeseries-res-1000g.csv&quot; ) data &lt;- read.csv(data_loc, na.strings=&quot;NONE&quot;) data$selection_name &lt;- factor( data$selection_name, levels=c(&quot;EpsilonLexicase&quot;, &quot;Tournament&quot;), labels=c(&quot;Lexicase&quot;, &quot;Tournament&quot;) ) data$elite_trait_avg &lt;- data$ele_agg_per / data$OBJECTIVE_CNT data$unique_start_positions_coverage &lt;- data$uni_str_pos / data$OBJECTIVE_CNT final_data &lt;- filter(data, evaluations==max(data$evaluations)) # Labeler for stats annotations p_label &lt;- function(p_value) { threshold = 0.0001 if (p_value &lt; threshold) { return(paste0(&quot;p &lt; &quot;, threshold)) } else { return(paste0(&quot;p = &quot;, p_value)) } } # Significance threshold alpha &lt;- 0.05 # Common graph variables performance_ylim &lt;- 105 coverage_ylim &lt;- 1.0 ####### misc ####### # Configure our default graphing theme theme_set(theme_cowplot()) 4.4 Exploration diagnostic performance elite_ave_performance_fig &lt;- ggplot( data, aes( x=gen, y=elite_trait_avg, color=selection_name, fill=selection_name ) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Average trait performance&quot;, limits=c(0, performance_ylim) ) + scale_x_continuous( name=&quot;Generation&quot; ) + scale_fill_brewer( name=&quot;Selection&quot;, limits=c(&quot;Lexicase&quot;, &quot;Tournament&quot;), labels=c(&quot;Lexicase&quot;, &quot;Tournament&quot;), palette=cb_palette ) + scale_color_brewer( name=&quot;Selection&quot;, limits=c(&quot;Lexicase&quot;, &quot;Tournament&quot;), labels=c(&quot;Lexicase&quot;, &quot;Tournament&quot;), palette=cb_palette ) elite_ave_performance_fig 4.5 Final Performance # Compute manual labels for geom_signif stat.test &lt;- final_data %&gt;% wilcox_test(elite_trait_avg ~ selection_name) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;selection_name&quot;,step.increase=1) stat.test$manual_position &lt;- stat.test$y.position * 1.05 stat.test$label &lt;- mapply(p_label,stat.test$p.adj) elite_final_performance_fig &lt;- ggplot( final_data, aes( x=selection_name, y=elite_trait_avg, fill=selection_name ) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8, scale=&quot;width&quot; ) + geom_point( mapping=aes(color=selection_name), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_y_continuous( name=&quot;Average trait performance&quot;, limits=c(0, performance_ylim) ) + scale_x_discrete( name=&quot;Selection&quot;, limits=c(&quot;Lexicase&quot;, &quot;Tournament&quot;), labels=c(&quot;Lexicase&quot;, &quot;Tournament&quot;), ) + scale_fill_brewer( name=&quot;Selection&quot;, palette=cb_palette, limits=c(&quot;Lexicase&quot;, &quot;Tournament&quot;), labels=c(&quot;Lexicase&quot;, &quot;Tournament&quot;), ) + scale_color_brewer( name=&quot;Selection&quot;, palette=cb_palette, limits=c(&quot;Lexicase&quot;, &quot;Tournament&quot;), labels=c(&quot;Lexicase&quot;, &quot;Tournament&quot;), ) + labs( subtitle=paste0( &quot;Kruskal-Wallis, &quot;, p_label( signif( kruskal.test( formula=elite_trait_avg~selection_name, data=final_data)$p.value,digits=4 ) ) ) ) + ggsignif::geom_signif( data=filter(stat.test, p.adj &lt;= alpha), aes( xmin=group1, xmax=group2, annotations=label, y_position=manual_position ), manual=TRUE, inherit.aes=FALSE ) + theme( legend.position=&quot;none&quot; ) ## Warning: Ignoring unknown aesthetics: xmin, xmax, annotations, y_position elite_final_performance_fig stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax manual_position label elite_trait_avg Lexicase Tournament 50 50 2357 0 0 **** 97.477 Lexicase , Tournament 1 2 102.3508 p &lt; 1e-04 4.6 Activation position coverage ggplot(data, aes(x=gen, y=uni_str_pos, color=selection_name)) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Unique activation positions (population)&quot;, limits=c(0, 100) ) + scale_x_continuous( name=&quot;Generation&quot; ) Different cardinalities have numbers of possible starting positions, so next, we look at the proportion of starting positions (out of all possible) maintained by populations. unique_start_position_coverage_fig &lt;- ggplot( data, aes( x=gen, y=unique_start_positions_coverage, color=selection_name, fill=selection_name ) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Activation position coverage&quot;, limit=c(0, coverage_ylim) ) + scale_x_continuous( name=&quot;Generation&quot; ) + scale_fill_brewer( name=&quot;Selection&quot;, limits=c(&quot;Lexicase&quot;, &quot;Tournament&quot;), labels=c(&quot;Lexicase&quot;, &quot;Tournament&quot;), palette=cb_palette ) + scale_color_brewer( name=&quot;Selection&quot;, limits=c(&quot;Lexicase&quot;, &quot;Tournament&quot;), labels=c(&quot;Lexicase&quot;, &quot;Tournament&quot;), palette=cb_palette ) unique_start_position_coverage_fig 4.6.1 Final activation position Coverage # Compute manual labels for geom_signif stat.test &lt;- final_data %&gt;% wilcox_test(unique_start_positions_coverage ~ selection_name) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;selection_name&quot;,step.increase=1) stat.test$manual_position &lt;- stat.test$y.position * 1.05 stat.test$label &lt;- mapply(p_label,stat.test$p.adj) unique_start_positions_coverage_final_fig &lt;- ggplot( final_data, aes( x=selection_name, y=unique_start_positions_coverage, fill=selection_name ) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8, scale=&quot;width&quot; ) + geom_point( mapping=aes(color=selection_name), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_y_continuous( name=&quot;Activation position coverage&quot;, limits=c(0, coverage_ylim) ) + scale_x_discrete( name=&quot;Selection&quot;, limits=c(&quot;Lexicase&quot;, &quot;Tournament&quot;), labels=c(&quot;Lexicase&quot;, &quot;Tournament&quot;), ) + scale_fill_brewer( name=&quot;Selection&quot;, palette=cb_palette, limits=c(&quot;Lexicase&quot;, &quot;Tournament&quot;), labels=c(&quot;Lexicase&quot;, &quot;Tournament&quot;), ) + scale_color_brewer( name=&quot;Selection&quot;, palette=cb_palette, limits=c(&quot;Lexicase&quot;, &quot;Tournament&quot;), labels=c(&quot;Lexicase&quot;, &quot;Tournament&quot;), ) + labs( subtitle=paste0( &quot;Kruskal-Wallis, &quot;, p_label( signif( kruskal.test( formula=unique_start_positions_coverage~selection_name, data=final_data)$p.value,digits=4 ) ) ) ) + ggsignif::geom_signif( data=filter(stat.test, p.adj &lt;= alpha), aes( xmin=group1, xmax=group2, annotations=label, y_position=manual_position ), manual=TRUE, inherit.aes=FALSE ) + theme( legend.position=&quot;none&quot; ) ## Warning: Ignoring unknown aesthetics: xmin, xmax, annotations, y_position unique_start_positions_coverage_final_fig stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax manual_position label unique_start_positions_coverage Lexicase Tournament 50 50 2500 0 0 **** 0.7 Lexicase , Tournament 1 2 0.735 p &lt; 1e-04 4.7 Manuscript figures legend &lt;- cowplot::get_legend( elite_ave_performance_fig + guides( color=guide_legend(nrow=1), fill=guide_legend(nrow=1) ) + theme( legend.position = &quot;bottom&quot;, legend.box=&quot;horizontal&quot;, legend.justification=&quot;center&quot; ) ) grid &lt;- plot_grid( elite_ave_performance_fig + ggtitle(&quot;Performance over time&quot;) + labs(subtitle=&quot;&quot;) + theme(legend.position=&quot;none&quot;), elite_final_performance_fig + ggtitle(&quot;Final performance&quot;) + theme(), unique_start_position_coverage_fig + ggtitle(&quot;Activation position coverage over time&quot;) + labs(subtitle=&quot;&quot;) + theme(legend.position=&quot;none&quot;), unique_start_positions_coverage_final_fig + ggtitle(&quot;Final activation position coverage&quot;) + theme(), nrow=2, ncol=2, rel_widths=c(3,2), labels=&quot;auto&quot; ) grid &lt;- plot_grid( grid, legend, nrow=2, ncol=1, rel_heights=c(1, 0.1) ) save_plot( paste( working_directory, &quot;imgs/tournament-vs-lexicase-panel.pdf&quot;, sep=&quot;&quot; ), grid, base_width=12, base_height=8 ) grid "],["diagnostic-cardinality.html", "Chapter 5 Diagnostic cardinality 5.1 Overview 5.2 Analysis dependencies 5.3 Setup 5.4 Exploration diagnostic performance 5.5 Activation position coverage 5.6 Does activation position coverage predict performance? 5.7 Manuscript figures", " Chapter 5 Diagnostic cardinality 5.1 Overview # Relative location of data. working_directory &lt;- &quot;experiments/2021-05-27-cardinality/analysis/&quot; # working_directory &lt;- &quot;./&quot; # Settings for visualization cb_palette &lt;- &quot;Set2&quot; # Create directory to dump plots dir.create(paste0(working_directory, &quot;imgs&quot;), showWarnings=FALSE) 5.2 Analysis dependencies library(ggplot2) library(tidyverse) library(knitr) library(cowplot) library(viridis) library(RColorBrewer) library(rstatix) library(ggsignif) library(Hmisc) library(kableExtra) source(&quot;https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R&quot;) These analyses were conducted in the following computing environment: print(version) ## _ ## platform x86_64-pc-linux-gnu ## arch x86_64 ## os linux-gnu ## system x86_64, linux-gnu ## status ## major 4 ## minor 1.0 ## year 2021 ## month 05 ## day 18 ## svn rev 80317 ## language R ## version.string R version 4.1.0 (2021-05-18) ## nickname Camp Pontanezen 5.3 Setup data_loc &lt;- paste0( working_directory, &quot;data/timeseries-res-1000g.csv&quot; ) data &lt;- read.csv( data_loc, na.strings=&quot;NONE&quot; ) data$cardinality &lt;- as.factor( data$OBJECTIVE_CNT ) data$selection_name &lt;- as.factor( data$selection_name ) data$elite_trait_avg &lt;- data$ele_agg_per / data$OBJECTIVE_CNT data$unique_start_positions_coverage &lt;- data$uni_str_pos / data$OBJECTIVE_CNT final_data &lt;- filter(data, gen==max(data$gen)) # Labeler for stats annotations p_label &lt;- function(p_value) { threshold = 0.0001 if (p_value &lt; threshold) { return(paste0(&quot;p &lt; &quot;, threshold)) } else { return(paste0(&quot;p = &quot;, p_value)) } } # Significance threshold alpha &lt;- 0.05 ####### misc ####### # Configure our default graphing theme theme_set(theme_cowplot()) 5.4 Exploration diagnostic performance First, we look at performance over time. Specifically, we look at the normalized aggregage score of the most performant individuals over time. To control for different cardinalities having different maximum scores, we normalized performances (by dividing by cardinality) to values between 0 and 100. elite_trait_ave_fit &lt;- ggplot( data, aes( x=gen, y=elite_trait_avg, color=cardinality, fill=cardinality ) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Average trait performance&quot;, limits=c(0, 100) ) + scale_x_continuous( name=&quot;Generation&quot; ) + scale_fill_brewer( name=&quot;Cardinaltiy&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Cardinaltiy&quot;, palette=cb_palette ) elite_trait_ave_fit 5.4.1 Final performance Next, we look only at the final performances of each treatment # Compute manual labels for geom_signif stat.test &lt;- final_data %&gt;% wilcox_test(elite_trait_avg ~ cardinality) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;cardinality&quot;,step.increase=1) stat.test$manual_position &lt;- stat.test$y.position * 1.05 stat.test$label &lt;- mapply(p_label,stat.test$p.adj) elite_trait_ave_fit_final &lt;- ggplot( final_data, aes(x=cardinality, y=elite_trait_avg, fill=cardinality) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8, scale=&quot;width&quot; ) + geom_point( mapping=aes(color=cardinality), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_y_continuous( name=&quot;Average trait performance&quot;, limits=c(0, 100) ) + scale_x_discrete( name=&quot;Cardinality&quot; ) + scale_fill_brewer( name=&quot;Cardinaltiy&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Cardinaltiy&quot;, palette=cb_palette ) + theme( legend.position=&quot;none&quot; ) elite_trait_ave_fit_final stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax manual_position label elite_trait_avg 10 20 50 50 2399 0 0 **** 191.9440 10, 20 1 2 201.5412 p &lt; 1e-04 elite_trait_avg 10 50 50 50 2404 0 0 **** 288.4852 10, 50 1 3 302.9095 p &lt; 1e-04 elite_trait_avg 10 100 50 50 2438 0 0 **** 385.0264 10 , 100 1 4 404.2777 p &lt; 1e-04 elite_trait_avg 10 200 50 50 2500 0 0 **** 481.5676 10 , 200 1 5 505.6460 p &lt; 1e-04 elite_trait_avg 10 500 50 50 2500 0 0 **** 578.1088 10 , 500 1 6 607.0142 p &lt; 1e-04 elite_trait_avg 10 1000 50 50 2500 0 0 **** 674.6500 10 , 1000 1 7 708.3825 p &lt; 1e-04 elite_trait_avg 20 50 50 50 2500 0 0 **** 771.1912 20, 50 2 3 809.7508 p &lt; 1e-04 elite_trait_avg 20 100 50 50 2500 0 0 **** 867.7324 20 , 100 2 4 911.1190 p &lt; 1e-04 elite_trait_avg 20 200 50 50 2500 0 0 **** 964.2736 20 , 200 2 5 1012.4873 p &lt; 1e-04 elite_trait_avg 20 500 50 50 2500 0 0 **** 1060.8148 20 , 500 2 6 1113.8555 p &lt; 1e-04 elite_trait_avg 20 1000 50 50 2500 0 0 **** 1157.3560 20 , 1000 2 7 1215.2238 p &lt; 1e-04 elite_trait_avg 50 100 50 50 2166 0 0 **** 1253.8972 50 , 100 3 4 1316.5921 p &lt; 1e-04 elite_trait_avg 50 200 50 50 2500 0 0 **** 1350.4384 50 , 200 3 5 1417.9603 p &lt; 1e-04 elite_trait_avg 50 500 50 50 2500 0 0 **** 1446.9796 50 , 500 3 6 1519.3286 p &lt; 1e-04 elite_trait_avg 50 1000 50 50 2500 0 0 **** 1543.5208 50 , 1000 3 7 1620.6968 p &lt; 1e-04 elite_trait_avg 100 200 50 50 2500 0 0 **** 1640.0620 100, 200 4 5 1722.0651 p &lt; 1e-04 elite_trait_avg 100 500 50 50 2500 0 0 **** 1736.6032 100, 500 4 6 1823.4334 p &lt; 1e-04 elite_trait_avg 100 1000 50 50 2500 0 0 **** 1833.1444 100 , 1000 4 7 1924.8016 p &lt; 1e-04 elite_trait_avg 200 500 50 50 2500 0 0 **** 1929.6856 200, 500 5 6 2026.1699 p &lt; 1e-04 elite_trait_avg 200 1000 50 50 2500 0 0 **** 2026.2268 200 , 1000 5 7 2127.5381 p &lt; 1e-04 elite_trait_avg 500 1000 50 50 2500 0 0 **** 2122.7680 500 , 1000 6 7 2228.9064 p &lt; 1e-04 5.5 Activation position coverage Next, we analyze the number of unique starting position maintained by populations. ggplot(data, aes(x=gen, y=uni_str_pos, color=cardinality)) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Unique activation positions (population)&quot;, ) + scale_x_continuous( name=&quot;Generation&quot; ) Different cardinalities have numbers of possible starting positions, so next, we look at the proportion of starting positions (out of all possible) maintained by populations. unique_start_positions_coverage_fig &lt;- ggplot( data, aes( x=gen, y=unique_start_positions_coverage, color=cardinality, fill=cardinality ) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Activation position coverage&quot;, limits=c(0.0, 1.05) ) + scale_x_continuous( name=&quot;Generation&quot; ) + scale_fill_brewer( name=&quot;Cardinaltiy&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Cardinaltiy&quot;, palette=cb_palette ) unique_start_positions_coverage_fig 5.5.1 Final activation position coverage # Compute manual labels for geom_signif stat.test &lt;- final_data %&gt;% wilcox_test(unique_start_positions_coverage ~ cardinality) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;cardinality&quot;,step.increase=1) stat.test$manual_position &lt;- stat.test$y.position * 1.05 stat.test$label &lt;- mapply(p_label,stat.test$p.adj) final_unique_start_positions_coverage_fig &lt;- ggplot( final_data, aes( x=cardinality, y=unique_start_positions_coverage, fill=cardinality ) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8, scale=&quot;width&quot; ) + geom_point( mapping=aes(color=cardinality), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_y_continuous( name=&quot;Activation position coverage&quot;, limits=c(0, 1.05) ) + scale_x_discrete( name=&quot;Cardinality&quot; ) + scale_fill_brewer( name=&quot;Cardinaltiy&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Cardinaltiy&quot;, palette=cb_palette ) + theme( legend.position=&quot;none&quot; ) final_unique_start_positions_coverage_fig stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax manual_position label unique_start_positions_coverage 10 20 50 50 1448 0.126 1 ns 1.94900 10, 20 1 2 2.046450 p = 1 unique_start_positions_coverage 10 50 50 50 2424 0.000 0 **** 2.94545 10, 50 1 3 3.092722 p &lt; 1e-04 unique_start_positions_coverage 10 100 50 50 2500 0.000 0 **** 3.94190 10 , 100 1 4 4.138995 p &lt; 1e-04 unique_start_positions_coverage 10 200 50 50 2500 0.000 0 **** 4.93835 10 , 200 1 5 5.185268 p &lt; 1e-04 unique_start_positions_coverage 10 500 50 50 2500 0.000 0 **** 5.93480 10 , 500 1 6 6.231540 p &lt; 1e-04 unique_start_positions_coverage 10 1000 50 50 2500 0.000 0 **** 6.93125 10 , 1000 1 7 7.277812 p &lt; 1e-04 unique_start_positions_coverage 20 50 50 50 2492 0.000 0 **** 7.92770 20, 50 2 3 8.324085 p &lt; 1e-04 unique_start_positions_coverage 20 100 50 50 2500 0.000 0 **** 8.92415 20 , 100 2 4 9.370358 p &lt; 1e-04 unique_start_positions_coverage 20 200 50 50 2500 0.000 0 **** 9.92060 20 , 200 2 5 10.416630 p &lt; 1e-04 unique_start_positions_coverage 20 500 50 50 2500 0.000 0 **** 10.91705 20 , 500 2 6 11.462903 p &lt; 1e-04 unique_start_positions_coverage 20 1000 50 50 2500 0.000 0 **** 11.91350 20 , 1000 2 7 12.509175 p &lt; 1e-04 unique_start_positions_coverage 50 100 50 50 2500 0.000 0 **** 12.90995 50 , 100 3 4 13.555447 p &lt; 1e-04 unique_start_positions_coverage 50 200 50 50 2500 0.000 0 **** 13.90640 50 , 200 3 5 14.601720 p &lt; 1e-04 unique_start_positions_coverage 50 500 50 50 2500 0.000 0 **** 14.90285 50 , 500 3 6 15.647993 p &lt; 1e-04 unique_start_positions_coverage 50 1000 50 50 2500 0.000 0 **** 15.89930 50 , 1000 3 7 16.694265 p &lt; 1e-04 unique_start_positions_coverage 100 200 50 50 2500 0.000 0 **** 16.89575 100, 200 4 5 17.740537 p &lt; 1e-04 unique_start_positions_coverage 100 500 50 50 2500 0.000 0 **** 17.89220 100, 500 4 6 18.786810 p &lt; 1e-04 unique_start_positions_coverage 100 1000 50 50 2500 0.000 0 **** 18.88865 100 , 1000 4 7 19.833082 p &lt; 1e-04 unique_start_positions_coverage 200 500 50 50 2500 0.000 0 **** 19.88510 200, 500 5 6 20.879355 p &lt; 1e-04 unique_start_positions_coverage 200 1000 50 50 2500 0.000 0 **** 20.88155 200 , 1000 5 7 21.925628 p &lt; 1e-04 unique_start_positions_coverage 500 1000 50 50 2500 0.000 0 **** 21.87800 500 , 1000 6 7 22.971900 p &lt; 1e-04 5.6 Does activation position coverage predict performance? ggplot( final_data, aes( x=unique_start_positions_coverage, y=elite_trait_avg, color=cardinality ) ) + geom_point() + scale_color_brewer( name=&quot;Cardinaltiy&quot;, palette=cb_palette ) cor.test( x=final_data$unique_start_positions_coverage, y=final_data$elite_trait_avg, method=&quot;spearman&quot;, exact=FALSE ) ## ## Spearman&#39;s rank correlation rho ## ## data: final_data$unique_start_positions_coverage and final_data$elite_trait_avg ## S = 262488, p-value &lt; 2.2e-16 ## alternative hypothesis: true rho is not equal to 0 ## sample estimates: ## rho ## 0.9632668 5.7 Manuscript figures Combine figures for the manuscript. legend &lt;- cowplot::get_legend( elite_trait_ave_fit + guides( color=guide_legend(nrow=1), fill=guide_legend(nrow=1) ) + theme( legend.position = &quot;bottom&quot;, legend.box=&quot;horizontal&quot;, legend.justification=&quot;center&quot; ) ) grid &lt;- plot_grid( elite_trait_ave_fit + ggtitle(&quot;Performance over time&quot;) + theme(legend.position=&quot;none&quot;), elite_trait_ave_fit_final + ggtitle(&quot;Final performance&quot;) + theme(), unique_start_positions_coverage_fig + ggtitle(&quot;Activation position coverage over time&quot;) + theme(legend.position=&quot;none&quot;), final_unique_start_positions_coverage_fig + ggtitle(&quot;Final activation position coverage&quot;) + theme(), nrow=2, ncol=2, rel_widths=c(3,2), labels=&quot;auto&quot; ) grid &lt;- plot_grid( grid, legend, nrow=2, ncol=1, rel_heights=c(1, 0.1) ) save_plot( paste(working_directory, &quot;imgs/cardinality-panel.pdf&quot;, sep=&quot;&quot;), grid, base_width=12, base_height=8 ) grid "],["increasing-population-size-versus-increasing-generations.html", "Chapter 6 Increasing population size versus increasing generations 6.1 Overview 6.2 Analysis dependencies 6.3 Setup 6.4 Exploration diagnostic performance 6.5 Activation position coverage 6.6 Manuscript figures", " Chapter 6 Increasing population size versus increasing generations 6.1 Overview # Relative location of data. working_directory &lt;- &quot;experiments/2021-06-03-cardinality-pop-size/analysis/&quot; # working_directory &lt;- &quot;./&quot; # Settings for visualization cb_palette &lt;- &quot;Set2&quot; # Create directory to dump plots dir.create(paste0(working_directory, &quot;imgs&quot;), showWarnings=FALSE) 6.2 Analysis dependencies library(ggplot2) library(tidyverse) library(knitr) library(cowplot) library(viridis) library(RColorBrewer) library(rstatix) library(ggsignif) library(Hmisc) library(kableExtra) source(&quot;https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R&quot;) These analyses were conducted in the following computing environment: print(version) ## _ ## platform x86_64-pc-linux-gnu ## arch x86_64 ## os linux-gnu ## system x86_64, linux-gnu ## status ## major 4 ## minor 1.0 ## year 2021 ## month 05 ## day 18 ## svn rev 80317 ## language R ## version.string R version 4.1.0 (2021-05-18) ## nickname Camp Pontanezen 6.3 Setup data_loc &lt;- paste0(working_directory, &quot;data/timeseries.csv&quot;) data &lt;- read.csv(data_loc, na.strings=&quot;NONE&quot;) data$cardinality &lt;- as.factor( data$OBJECTIVE_CNT ) data$selection_name &lt;- as.factor( data$selection_name ) data$epsilon &lt;- as.factor( data$LEX_EPS ) data$POP_SIZE &lt;- as.factor( data$POP_SIZE ) data &lt;- filter(data, cardinality==&quot;100&quot;) # These runs finished. data$elite_trait_avg &lt;- data$ele_agg_per / data$OBJECTIVE_CNT data$unique_start_positions_coverage &lt;- data$uni_str_pos / data$OBJECTIVE_CNT final_data &lt;- filter(data, evaluations==max(data$evaluations)) # Labeler for stats annotations p_label &lt;- function(p_value) { threshold = 0.0001 if (p_value &lt; threshold) { return(paste0(&quot;p &lt; &quot;, threshold)) } else { return(paste0(&quot;p = &quot;, p_value)) } } # Significance threshold alpha &lt;- 0.05 ####### misc ####### # Configure our default graphing theme theme_set(theme_cowplot()) 6.4 Exploration diagnostic performance elite_ave_performance_fig &lt;- ggplot( data, aes( x=evaluations, y=elite_trait_avg, color=POP_SIZE, fill=POP_SIZE ) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Average trait performance&quot; ) + scale_x_continuous( name=&quot;Evaluations&quot; ) + scale_fill_brewer( name=&quot;Population Size&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Population Size&quot;, palette=cb_palette ) elite_ave_performance_fig Same as above, but by generations instead of evaluations. ggplot(data, aes(x=gen, y=elite_trait_avg, color=POP_SIZE)) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Elite trait average&quot; ) + scale_x_continuous( name=&quot;Generations&quot; ) 6.4.1 Final performance # Compute manual labels for geom_signif stat.test &lt;- final_data %&gt;% wilcox_test(elite_trait_avg ~ POP_SIZE) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;POP_SIZE&quot;,step.increase=1) stat.test$manual_position &lt;- stat.test$y.position * 1.05 stat.test$label &lt;- mapply(p_label,stat.test$p.adj) elite_final_performance_fig &lt;- ggplot( final_data, aes(x=POP_SIZE, y=elite_trait_avg, fill=POP_SIZE) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8, scale=&quot;width&quot; ) + geom_point( mapping=aes(color=POP_SIZE), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_y_continuous( name=&quot;Average trait performance&quot;, limits=c(0, 100) ) + scale_x_discrete( name=&quot;Population Size&quot; ) + scale_fill_brewer( name=&quot;Population Size&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Population Size&quot;, palette=cb_palette ) + theme( legend.position=&quot;none&quot; ) elite_final_performance_fig stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax manual_position label elite_trait_avg 500 1000 50 50 219 0 0 **** 102.036 500 , 1000 1 2 107.1378 p &lt; 1e-04 6.5 Activation position coverage unique_start_position_coverage_fig &lt;- ggplot( data, aes( x=evaluations, y=unique_start_positions_coverage, color=POP_SIZE, fill=POP_SIZE ) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Activation position coverage&quot;, limits=c(0.0, 1.0) ) + scale_x_continuous( name=&quot;Evaluations&quot; ) + scale_fill_brewer( name=&quot;Population Size&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Population Size&quot;, palette=cb_palette ) unique_start_position_coverage_fig 6.5.1 Final activation position coverage # Compute manual labels for geom_signif stat.test &lt;- final_data %&gt;% wilcox_test(unique_start_positions_coverage ~ POP_SIZE) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;POP_SIZE&quot;,step.increase=1) stat.test$manual_position &lt;- stat.test$y.position * 1.05 stat.test$label &lt;- mapply(p_label,stat.test$p.adj) unique_start_positions_coverage_final_fig &lt;- ggplot( final_data, aes( x=POP_SIZE, y=unique_start_positions_coverage, fill=POP_SIZE ) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8, scale=&quot;width&quot; ) + geom_point( mapping=aes(color=POP_SIZE), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_y_continuous( name=&quot;Activation position coverage&quot;, limits=c(0, 1.0) ) + scale_x_discrete( name=&quot;Population size&quot; ) + scale_fill_brewer( name=&quot;Population size&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Population size&quot;, palette=cb_palette ) + theme( legend.position=&quot;none&quot; ) unique_start_positions_coverage_final_fig stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax manual_position label unique_start_positions_coverage 500 1000 50 50 0 0 0 **** 1.23 500 , 1000 1 2 1.2915 p &lt; 1e-04 6.6 Manuscript figures legend &lt;- cowplot::get_legend( elite_ave_performance_fig + guides( color=guide_legend(nrow=1), fill=guide_legend(nrow=1) ) + theme( legend.position = &quot;bottom&quot;, legend.box=&quot;horizontal&quot;, legend.justification=&quot;center&quot; ) ) grid &lt;- plot_grid( elite_ave_performance_fig + ggtitle(&quot;Performance over time&quot;) + theme(legend.position=&quot;none&quot;), elite_final_performance_fig + ggtitle(&quot;Final performance&quot;) + theme(), unique_start_position_coverage_fig + ggtitle(&quot;Activation position coverage over time&quot;) + theme(legend.position=&quot;none&quot;), unique_start_positions_coverage_final_fig + ggtitle(&quot;Final activation position coverage&quot;) + theme(), nrow=2, ncol=2, rel_widths=c(3,2), labels=&quot;auto&quot; ) grid &lt;- plot_grid( grid, legend, nrow=2, ncol=1, rel_heights=c(1, 0.1) ) save_plot( paste(working_directory, &quot;imgs/pop-size-panel.pdf&quot;, sep=&quot;&quot;), grid, base_width=12, base_height=8 ) grid "],["epsilon-lexicase.html", "Chapter 7 Epsilon lexicase 7.1 Overview 7.2 Analysis dependencies 7.3 Setup 7.4 Exploration diagnostic performance 7.5 Activation position coverage 7.6 Manuscript figures", " Chapter 7 Epsilon lexicase 7.1 Overview # Relative location of data. working_directory &lt;- &quot;experiments/2021-05-28-epsilon/analysis/&quot; # working_directory &lt;- &quot;./&quot; # Settings for visualization cb_palette &lt;- &quot;Set2&quot; # Create directory to dump plots dir.create(paste0(working_directory, &quot;imgs&quot;), showWarnings=FALSE) 7.2 Analysis dependencies library(ggplot2) library(tidyverse) library(knitr) library(cowplot) library(viridis) library(RColorBrewer) library(rstatix) library(ggsignif) library(Hmisc) library(kableExtra) source(&quot;https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R&quot;) These analyses were conducted in the following computing environment: print(version) ## _ ## platform x86_64-pc-linux-gnu ## arch x86_64 ## os linux-gnu ## system x86_64, linux-gnu ## status ## major 4 ## minor 1.0 ## year 2021 ## month 05 ## day 18 ## svn rev 80317 ## language R ## version.string R version 4.1.0 (2021-05-18) ## nickname Camp Pontanezen 7.3 Setup data_loc &lt;- paste0( working_directory, &quot;data/timeseries-res-1000g.csv&quot; ) data &lt;- read.csv(data_loc, na.strings=&quot;NONE&quot;) data$cardinality &lt;- as.factor( data$OBJECTIVE_CNT ) data$selection_name &lt;- as.factor( data$selection_name ) data$epsilon &lt;- as.factor( data$LEX_EPS ) data$elite_trait_avg &lt;- data$ele_agg_per / data$OBJECTIVE_CNT data$unique_start_positions_coverage &lt;- data$uni_str_pos / data$OBJECTIVE_CNT final_data &lt;- filter(data, evaluations==max(data$evaluations)) # Labeler for stats annotations p_label &lt;- function(p_value) { threshold = 0.0001 if (p_value &lt; threshold) { return(paste0(&quot;p &lt; &quot;, threshold)) } else { return(paste0(&quot;p = &quot;, p_value)) } } # Significance threshold alpha &lt;- 0.05 ####### misc ####### # Configure our default graphing theme theme_set(theme_cowplot()) 7.4 Exploration diagnostic performance elite_ave_performance_fig &lt;- ggplot( data, aes(x=gen, y=elite_trait_avg, color=epsilon, fill=epsilon) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Average trait performance&quot; ) + scale_x_continuous( name=&quot;Generations&quot; ) + scale_fill_brewer( name=&quot;Epsilon&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Epsilon&quot;, palette=cb_palette ) elite_ave_performance_fig 7.4.1 Final performance # Compute manual labels for geom_signif stat.test &lt;- final_data %&gt;% wilcox_test(elite_trait_avg ~ epsilon) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;epsilon&quot;,step.increase=1) stat.test$label &lt;- mapply(p_label,stat.test$p.adj) elite_final_performance_fig &lt;- ggplot( final_data, aes(x=epsilon, y=elite_trait_avg, fill=epsilon) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8, scale=&quot;width&quot; ) + geom_point( mapping=aes(color=epsilon), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_y_continuous( name=&quot;Average trait performance&quot;, limits=c(0, 100) ) + scale_x_discrete( name=&quot;Epsilon&quot; ) + scale_fill_brewer( name=&quot;Epsilon&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Epsilon&quot;, palette=cb_palette ) + theme( legend.position=&quot;none&quot; ) elite_final_performance_fig stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax label elite_trait_avg 0 0.1 50 50 346 0.00e+00 0.00e+00 **** 192.9100 0 , 0.1 1 2 p &lt; 1e-04 elite_trait_avg 0 0.3 50 50 572 3.00e-06 8.40e-05 **** 290.9318 0 , 0.3 1 3 p &lt; 1e-04 elite_trait_avg 0 0.6 50 50 1013 1.03e-01 1.00e+00 ns 388.9536 0 , 0.6 1 4 p = 1 elite_trait_avg 0 1.2 50 50 1958 1.10e-06 3.02e-05 **** 486.9753 0 , 1.2 1 5 p &lt; 1e-04 elite_trait_avg 0 2.5 50 50 2500 0.00e+00 0.00e+00 **** 584.9971 0 , 2.5 1 6 p &lt; 1e-04 elite_trait_avg 0 5 50 50 2500 0.00e+00 0.00e+00 **** 683.0189 0, 5 1 7 p &lt; 1e-04 elite_trait_avg 0 10 50 50 2500 0.00e+00 0.00e+00 **** 781.0407 0 , 10 1 8 p &lt; 1e-04 elite_trait_avg 0.1 0.3 50 50 1685 3.00e-03 8.40e-02 ns 879.0624 0.1, 0.3 2 3 p = 0.084 elite_trait_avg 0.1 0.6 50 50 2242 0.00e+00 0.00e+00 **** 977.0842 0.1, 0.6 2 4 p &lt; 1e-04 elite_trait_avg 0.1 1.2 50 50 2497 0.00e+00 0.00e+00 **** 1075.1060 0.1, 1.2 2 5 p &lt; 1e-04 elite_trait_avg 0.1 2.5 50 50 2500 0.00e+00 0.00e+00 **** 1173.1278 0.1, 2.5 2 6 p &lt; 1e-04 elite_trait_avg 0.1 5 50 50 2500 0.00e+00 0.00e+00 **** 1271.1496 0.1, 5 2 7 p &lt; 1e-04 elite_trait_avg 0.1 10 50 50 2500 0.00e+00 0.00e+00 **** 1369.1713 0.1, 10 2 8 p &lt; 1e-04 elite_trait_avg 0.3 0.6 50 50 2048 0.00e+00 1.10e-06 **** 1467.1931 0.3, 0.6 3 4 p &lt; 1e-04 elite_trait_avg 0.3 1.2 50 50 2463 0.00e+00 0.00e+00 **** 1565.2149 0.3, 1.2 3 5 p &lt; 1e-04 elite_trait_avg 0.3 2.5 50 50 2500 0.00e+00 0.00e+00 **** 1663.2367 0.3, 2.5 3 6 p &lt; 1e-04 elite_trait_avg 0.3 5 50 50 2500 0.00e+00 0.00e+00 **** 1761.2584 0.3, 5 3 7 p &lt; 1e-04 elite_trait_avg 0.3 10 50 50 2500 0.00e+00 0.00e+00 **** 1859.2802 0.3, 10 3 8 p &lt; 1e-04 elite_trait_avg 0.6 1.2 50 50 2412 0.00e+00 0.00e+00 **** 1957.3020 0.6, 1.2 4 5 p &lt; 1e-04 elite_trait_avg 0.6 2.5 50 50 2500 0.00e+00 0.00e+00 **** 2055.3238 0.6, 2.5 4 6 p &lt; 1e-04 elite_trait_avg 0.6 5 50 50 2500 0.00e+00 0.00e+00 **** 2153.3456 0.6, 5 4 7 p &lt; 1e-04 elite_trait_avg 0.6 10 50 50 2500 0.00e+00 0.00e+00 **** 2251.3673 0.6, 10 4 8 p &lt; 1e-04 elite_trait_avg 1.2 2.5 50 50 2500 0.00e+00 0.00e+00 **** 2349.3891 1.2, 2.5 5 6 p &lt; 1e-04 elite_trait_avg 1.2 5 50 50 2500 0.00e+00 0.00e+00 **** 2447.4109 1.2, 5 5 7 p &lt; 1e-04 elite_trait_avg 1.2 10 50 50 2500 0.00e+00 0.00e+00 **** 2545.4327 1.2, 10 5 8 p &lt; 1e-04 elite_trait_avg 2.5 5 50 50 2500 0.00e+00 0.00e+00 **** 2643.4544 2.5, 5 6 7 p &lt; 1e-04 elite_trait_avg 2.5 10 50 50 2500 0.00e+00 0.00e+00 **** 2741.4762 2.5, 10 6 8 p &lt; 1e-04 elite_trait_avg 5 10 50 50 2225 0.00e+00 0.00e+00 **** 2839.4980 5 , 10 7 8 p &lt; 1e-04 7.5 Activation position coverage unique_start_position_coverage_fig &lt;- ggplot( data, aes( x=gen, y=unique_start_positions_coverage, color=epsilon, fill=epsilon ) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Activation position coverage&quot;, limits=c(0.0, 1.0) ) + scale_x_continuous( name=&quot;Generations&quot; ) + scale_fill_brewer( name=&quot;Epsilon&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Epsilon&quot;, palette=cb_palette ) unique_start_position_coverage_fig 7.5.1 Final activation position coverage # Compute manual labels for geom_signif stat.test &lt;- final_data %&gt;% wilcox_test(unique_start_positions_coverage ~ epsilon) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;epsilon&quot;,step.increase=1) stat.test$label &lt;- mapply(p_label,stat.test$p.adj) unique_start_positions_coverage_final_fig &lt;- ggplot( final_data, aes( x=epsilon, y=unique_start_positions_coverage, fill=epsilon ) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8, scale=&quot;width&quot; ) + geom_point( mapping=aes(color=epsilon), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_y_continuous( name=&quot;Activation position coverage&quot;, limits=c(0, 1.0) ) + scale_x_discrete( name=&quot;Epsilon&quot; ) + scale_fill_brewer( name=&quot;Epsilon&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Epsilon&quot;, palette=cb_palette ) + theme( legend.position=&quot;none&quot; ) unique_start_positions_coverage_final_fig stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax label unique_start_positions_coverage 0 0.1 50 50 2144.0 0.00e+00 0.0000000 **** 0.5500000 0 , 0.1 1 2 p &lt; 1e-04 unique_start_positions_coverage 0 0.3 50 50 2379.0 0.00e+00 0.0000000 **** 0.7262963 0 , 0.3 1 3 p &lt; 1e-04 unique_start_positions_coverage 0 0.6 50 50 2449.0 0.00e+00 0.0000000 **** 0.9025926 0 , 0.6 1 4 p &lt; 1e-04 unique_start_positions_coverage 0 1.2 50 50 2427.5 0.00e+00 0.0000000 **** 1.0788889 0 , 1.2 1 5 p &lt; 1e-04 unique_start_positions_coverage 0 2.5 50 50 2500.0 0.00e+00 0.0000000 **** 1.2551852 0 , 2.5 1 6 p &lt; 1e-04 unique_start_positions_coverage 0 5 50 50 2050.5 0.00e+00 0.0000009 **** 1.4314815 0, 5 1 7 p &lt; 1e-04 unique_start_positions_coverage 0 10 50 50 1207.5 7.71e-01 1.0000000 ns 1.6077778 0 , 10 1 8 p = 1 unique_start_positions_coverage 0.1 0.3 50 50 1796.0 1.58e-04 0.0044240 ** 1.7840741 0.1, 0.3 2 3 p = 0.004424 unique_start_positions_coverage 0.1 0.6 50 50 2107.0 0.00e+00 0.0000001 **** 1.9603704 0.1, 0.6 2 4 p &lt; 1e-04 unique_start_positions_coverage 0.1 1.2 50 50 2018.5 1.00e-07 0.0000030 **** 2.1366667 0.1, 1.2 2 5 p &lt; 1e-04 unique_start_positions_coverage 0.1 2.5 50 50 2465.0 0.00e+00 0.0000000 **** 2.3129630 0.1, 2.5 2 6 p &lt; 1e-04 unique_start_positions_coverage 0.1 5 50 50 962.0 4.60e-02 1.0000000 ns 2.4892593 0.1, 5 2 7 p = 1 unique_start_positions_coverage 0.1 10 50 50 267.0 0.00e+00 0.0000000 **** 2.6655556 0.1, 10 2 8 p &lt; 1e-04 unique_start_positions_coverage 0.3 0.6 50 50 1657.5 5.00e-03 0.1400000 ns 2.8418519 0.3, 0.6 3 4 p = 0.14 unique_start_positions_coverage 0.3 1.2 50 50 1557.0 3.40e-02 0.9520000 ns 3.0181481 0.3, 1.2 3 5 p = 0.952 unique_start_positions_coverage 0.3 2.5 50 50 2328.5 0.00e+00 0.0000000 **** 3.1944444 0.3, 2.5 3 6 p &lt; 1e-04 unique_start_positions_coverage 0.3 5 50 50 457.0 0.00e+00 0.0000012 **** 3.3707407 0.3, 5 3 7 p &lt; 1e-04 unique_start_positions_coverage 0.3 10 50 50 66.5 0.00e+00 0.0000000 **** 3.5470370 0.3, 10 3 8 p &lt; 1e-04 unique_start_positions_coverage 0.6 1.2 50 50 1187.5 6.68e-01 1.0000000 ns 3.7233333 0.6, 1.2 4 5 p = 1 unique_start_positions_coverage 0.6 2.5 50 50 2184.5 0.00e+00 0.0000000 **** 3.8996296 0.6, 2.5 4 6 p &lt; 1e-04 unique_start_positions_coverage 0.6 5 50 50 218.0 0.00e+00 0.0000000 **** 4.0759259 0.6, 5 4 7 p &lt; 1e-04 unique_start_positions_coverage 0.6 10 50 50 19.0 0.00e+00 0.0000000 **** 4.2522222 0.6, 10 4 8 p &lt; 1e-04 unique_start_positions_coverage 1.2 2.5 50 50 2131.5 0.00e+00 0.0000000 **** 4.4285185 1.2, 2.5 5 6 p &lt; 1e-04 unique_start_positions_coverage 1.2 5 50 50 289.5 0.00e+00 0.0000000 **** 4.6048148 1.2, 5 5 7 p &lt; 1e-04 unique_start_positions_coverage 1.2 10 50 50 22.5 0.00e+00 0.0000000 **** 4.7811111 1.2, 10 5 8 p &lt; 1e-04 unique_start_positions_coverage 2.5 5 50 50 4.5 0.00e+00 0.0000000 **** 4.9574074 2.5, 5 6 7 p &lt; 1e-04 unique_start_positions_coverage 2.5 10 50 50 0.0 0.00e+00 0.0000000 **** 5.1337037 2.5, 10 6 8 p &lt; 1e-04 unique_start_positions_coverage 5 10 50 50 386.5 0.00e+00 0.0000001 **** 5.3100000 5 , 10 7 8 p &lt; 1e-04 7.6 Manuscript figures legend &lt;- cowplot::get_legend( elite_ave_performance_fig + guides( color=guide_legend(nrow=1), fill=guide_legend(nrow=1) ) + theme( legend.position = &quot;bottom&quot;, legend.box=&quot;horizontal&quot;, legend.justification=&quot;center&quot; ) ) grid &lt;- plot_grid( elite_ave_performance_fig + ggtitle(&quot;Performance over time&quot;) + theme(legend.position=&quot;none&quot;), elite_final_performance_fig + ggtitle(&quot;Final performance&quot;) + theme(), unique_start_position_coverage_fig + ggtitle(&quot;Activation position coverage over time&quot;) + theme(legend.position=&quot;none&quot;), unique_start_positions_coverage_final_fig + ggtitle(&quot;Final activation position coverage&quot;) + theme(), nrow=2, ncol=2, rel_widths=c(3,2), labels=&quot;auto&quot; ) grid &lt;- plot_grid( grid, legend, nrow=2, ncol=1, rel_heights=c(1, 0.1) ) save_plot( paste(working_directory, &quot;imgs/epsilon-panel.pdf&quot;, sep=&quot;&quot;), grid, base_width=12, base_height=8 ) grid "],["down-sampled-lexicase.html", "Chapter 8 Down-sampled lexicase 8.1 Overview 8.2 Analysis dependencies 8.3 Setup 8.4 Exploration diagnostic performance 8.5 Activation position coverage 8.6 Manuscript figures", " Chapter 8 Down-sampled lexicase 8.1 Overview # Relative location of data. working_directory &lt;- &quot;experiments/2021-05-28-downsampled/analysis/&quot; # working_directory &lt;- &quot;./&quot; # Settings for visualization cb_palette &lt;- &quot;Set2&quot; # Create directory to dump plots dir.create(paste0(working_directory, &quot;imgs&quot;), showWarnings=FALSE) 8.2 Analysis dependencies library(ggplot2) library(tidyverse) library(knitr) library(cowplot) library(viridis) library(RColorBrewer) library(rstatix) library(ggsignif) library(Hmisc) library(kableExtra) source(&quot;https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R&quot;) These analyses were conducted in the following computing environment: print(version) ## _ ## platform x86_64-pc-linux-gnu ## arch x86_64 ## os linux-gnu ## system x86_64, linux-gnu ## status ## major 4 ## minor 1.0 ## year 2021 ## month 05 ## day 18 ## svn rev 80317 ## language R ## version.string R version 4.1.0 (2021-05-18) ## nickname Camp Pontanezen 8.3 Setup data_loc &lt;- paste0(working_directory, &quot;data/timeseries.csv&quot;) data &lt;- read.csv(data_loc, na.strings=&quot;NONE&quot;) data$cardinality &lt;- as.factor( data$OBJECTIVE_CNT ) data$selection_name &lt;- as.factor( data$selection_name ) data$epsilon &lt;- as.factor( data$LEX_EPS ) data$proportion &lt;- factor( data$DSLEX_PROP, levels=c(1, 0.5, 0.2, 0.1, 0.05, 0.02, 0.01) ) data$proportion_label &lt;- data$DSLEX_PROP * 100 data$proportion_label &lt;- paste0(data$proportion_label, &quot;%&quot;) data$proportion_label &lt;- factor( data$proportion_label, levels=c(&quot;100%&quot;, &quot;50%&quot;, &quot;20%&quot;, &quot;10%&quot;, &quot;5%&quot; , &quot;2%&quot;, &quot;1%&quot;) ) data$elite_trait_avg &lt;- data$ele_agg_per / data$OBJECTIVE_CNT data$unique_start_positions_coverage &lt;- data$uni_str_pos / data$OBJECTIVE_CNT final_data &lt;- filter(data, evaluations==max(data$evaluations)) # Labeler for stats annotations p_label &lt;- function(p_value) { threshold = 0.0001 if (p_value &lt; threshold) { return(paste0(&quot;p &lt; &quot;, threshold)) } else { return(paste0(&quot;p = &quot;, p_value)) } } # Significance threshold alpha &lt;- 0.05 ####### misc ####### # Configure our default graphing theme theme_set(theme_cowplot()) 8.4 Exploration diagnostic performance elite_ave_performance_fig &lt;- ggplot( data, aes( x=evaluations, y=elite_trait_avg, color=proportion_label, fill=proportion_label ) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Average trait performance&quot;, limits=c(0, 100) ) + scale_x_continuous( name=&quot;Evaluations&quot; ) + scale_fill_brewer( name=&quot;Sampling rate&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Sampling rate&quot;, palette=cb_palette ) elite_ave_performance_fig 8.4.1 Final performance # Compute manual labels for geom_signif stat.test &lt;- final_data %&gt;% wilcox_test(elite_trait_avg ~ proportion_label) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;proportion_label&quot;,step.increase=1) stat.test$manual_position &lt;- stat.test$y.position * 1.05 stat.test$label &lt;- mapply(p_label,stat.test$p.adj) elite_final_performance_fig &lt;- ggplot( final_data, aes( x=proportion_label, y=elite_trait_avg, fill=proportion_label ) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8, scale=&quot;width&quot; ) + geom_point( mapping=aes(color=proportion_label), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_y_continuous( name=&quot;Average trait performance&quot;, limits=c(0, 100) ) + scale_x_discrete( name=&quot;Sampling rate&quot; ) + scale_fill_brewer( name=&quot;Sampling rate&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Sampling rate&quot;, palette=cb_palette ) + theme( legend.position=&quot;none&quot; ) elite_final_performance_fig stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax manual_position label elite_trait_avg 100% 50% 50 50 2500 0.00e+00 0.0000000 **** 184.488 100%, 50% 1 2 193.7124 p &lt; 1e-04 elite_trait_avg 100% 20% 50 50 2500 0.00e+00 0.0000000 **** 277.224 100%, 20% 1 3 291.0852 p &lt; 1e-04 elite_trait_avg 100% 10% 50 50 2500 0.00e+00 0.0000000 **** 369.960 100%, 10% 1 4 388.4580 p &lt; 1e-04 elite_trait_avg 100% 5% 50 50 2500 0.00e+00 0.0000000 **** 462.696 100%, 5% 1 5 485.8308 p &lt; 1e-04 elite_trait_avg 100% 2% 50 50 2500 0.00e+00 0.0000000 **** 555.432 100%, 2% 1 6 583.2036 p &lt; 1e-04 elite_trait_avg 100% 1% 50 50 2500 0.00e+00 0.0000000 **** 648.168 100%, 1% 1 7 680.5764 p &lt; 1e-04 elite_trait_avg 50% 20% 50 50 1344 5.19e-01 1.0000000 ns 740.904 50%, 20% 2 3 777.9492 p = 1 elite_trait_avg 50% 10% 50 50 1862 2.49e-05 0.0005229 *** 833.640 50%, 10% 2 4 875.3220 p = 0.0005229 elite_trait_avg 50% 5% 50 50 2093 0.00e+00 0.0000001 **** 926.376 50%, 5% 2 5 972.6948 p &lt; 1e-04 elite_trait_avg 50% 2% 50 50 2167 0.00e+00 0.0000000 **** 1019.112 50%, 2% 2 6 1070.0676 p &lt; 1e-04 elite_trait_avg 50% 1% 50 50 2199 0.00e+00 0.0000000 **** 1111.848 50%, 1% 2 7 1167.4404 p &lt; 1e-04 elite_trait_avg 20% 10% 50 50 1623 1.00e-02 0.2100000 ns 1204.584 20%, 10% 3 4 1264.8132 p = 0.21 elite_trait_avg 20% 5% 50 50 1863 2.42e-05 0.0005082 *** 1297.320 20%, 5% 3 5 1362.1860 p = 0.0005082 elite_trait_avg 20% 2% 50 50 1974 6.00e-07 0.0000128 **** 1390.056 20%, 2% 3 6 1459.5588 p &lt; 1e-04 elite_trait_avg 20% 1% 50 50 2064 0.00e+00 0.0000004 **** 1482.792 20%, 1% 3 7 1556.9316 p &lt; 1e-04 elite_trait_avg 10% 5% 50 50 1673 4.00e-03 0.0840000 ns 1575.528 10%, 5% 4 5 1654.3044 p = 0.084 elite_trait_avg 10% 2% 50 50 1979 5.00e-07 0.0000107 **** 1668.264 10%, 2% 4 6 1751.6772 p &lt; 1e-04 elite_trait_avg 10% 1% 50 50 2021 1.00e-07 0.0000023 **** 1761.000 10%, 1% 4 7 1849.0500 p &lt; 1e-04 elite_trait_avg 5% 2% 50 50 1555 3.60e-02 0.7560000 ns 1853.736 5%, 2% 5 6 1946.4228 p = 0.756 elite_trait_avg 5% 1% 50 50 1674 4.00e-03 0.0840000 ns 1946.472 5%, 1% 5 7 2043.7956 p = 0.084 elite_trait_avg 2% 1% 50 50 1489 1.00e-01 1.0000000 ns 2039.208 2%, 1% 6 7 2141.1684 p = 1 8.5 Activation position coverage unique_start_position_coverage_fig &lt;- ggplot( data, aes( x=evaluations, y=unique_start_positions_coverage, color=proportion_label, fill=proportion_label ) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Activation position coverage&quot;, limits=c(0.0, 1.0) ) + scale_x_continuous( name=&quot;Evaluations&quot; ) + scale_fill_brewer( name=&quot;Sampling rate&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Sampling rate&quot;, palette=cb_palette ) unique_start_position_coverage_fig 8.5.1 Final activation position coverage # Compute manual labels for geom_signif stat.test &lt;- final_data %&gt;% wilcox_test(unique_start_positions_coverage ~ proportion_label) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;proportion_label&quot;,step.increase=1) stat.test$manual_position &lt;- stat.test$y.position * 1.05 stat.test$label &lt;- mapply(p_label,stat.test$p.adj) unique_start_positions_coverage_final_fig &lt;- ggplot( final_data, aes( x=proportion_label, y=unique_start_positions_coverage, fill=proportion_label ) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8, scale=&quot;width&quot; ) + geom_point( mapping=aes(color=proportion_label), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_y_continuous( name=&quot;Activation position coverage&quot;, limits=c(0, 1.0) ) + scale_x_discrete( name=&quot;Sampling rate&quot; ) + scale_fill_brewer( name=&quot;Sampling rate&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Sampling rate&quot;, palette=cb_palette ) + theme( legend.position=&quot;none&quot; ) unique_start_positions_coverage_final_fig stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax manual_position label unique_start_positions_coverage 100% 50% 50 50 2500.0 0.00e+00 0.0000000 **** 0.7300 100%, 50% 1 2 0.766500 p &lt; 1e-04 unique_start_positions_coverage 100% 20% 50 50 2500.0 0.00e+00 0.0000000 **** 1.0975 100%, 20% 1 3 1.152375 p &lt; 1e-04 unique_start_positions_coverage 100% 10% 50 50 2500.0 0.00e+00 0.0000000 **** 1.4650 100%, 10% 1 4 1.538250 p &lt; 1e-04 unique_start_positions_coverage 100% 5% 50 50 2500.0 0.00e+00 0.0000000 **** 1.8325 100%, 5% 1 5 1.924125 p &lt; 1e-04 unique_start_positions_coverage 100% 2% 50 50 2500.0 0.00e+00 0.0000000 **** 2.2000 100%, 2% 1 6 2.310000 p &lt; 1e-04 unique_start_positions_coverage 100% 1% 50 50 2500.0 0.00e+00 0.0000000 **** 2.5675 100%, 1% 1 7 2.695875 p &lt; 1e-04 unique_start_positions_coverage 50% 20% 50 50 607.0 1.00e-07 0.0000012 **** 2.9350 50%, 20% 2 3 3.081750 p &lt; 1e-04 unique_start_positions_coverage 50% 10% 50 50 258.0 0.00e+00 0.0000000 **** 3.3025 50%, 10% 2 4 3.467625 p &lt; 1e-04 unique_start_positions_coverage 50% 5% 50 50 365.5 0.00e+00 0.0000000 **** 3.6700 50%, 5% 2 5 3.853500 p &lt; 1e-04 unique_start_positions_coverage 50% 2% 50 50 306.5 0.00e+00 0.0000000 **** 4.0375 50%, 2% 2 6 4.239375 p &lt; 1e-04 unique_start_positions_coverage 50% 1% 50 50 175.5 0.00e+00 0.0000000 **** 4.4050 50%, 1% 2 7 4.625250 p &lt; 1e-04 unique_start_positions_coverage 20% 10% 50 50 800.5 1.00e-03 0.0210000 4.7725 20%, 10% 3 4 5.011125 p = 0.021 unique_start_positions_coverage 20% 5% 50 50 944.0 2.90e-02 0.6090000 ns 5.1400 20%, 5% 3 5 5.397000 p = 0.609 unique_start_positions_coverage 20% 2% 50 50 833.0 3.00e-03 0.0630000 ns 5.5075 20%, 2% 3 6 5.782875 p = 0.063 unique_start_positions_coverage 20% 1% 50 50 678.5 5.63e-05 0.0011823 ** 5.8750 20%, 1% 3 7 6.168750 p = 0.0011823 unique_start_positions_coverage 10% 5% 50 50 1397.0 3.04e-01 1.0000000 ns 6.2425 10%, 5% 4 5 6.554625 p = 1 unique_start_positions_coverage 10% 2% 50 50 1276.5 8.56e-01 1.0000000 ns 6.6100 10%, 2% 4 6 6.940500 p = 1 unique_start_positions_coverage 10% 1% 50 50 1118.5 3.60e-01 1.0000000 ns 6.9775 10%, 1% 4 7 7.326375 p = 1 unique_start_positions_coverage 5% 2% 50 50 1128.0 3.94e-01 1.0000000 ns 7.3450 5%, 2% 5 6 7.712250 p = 1 unique_start_positions_coverage 5% 1% 50 50 973.0 5.30e-02 1.0000000 ns 7.7125 5%, 1% 5 7 8.098125 p = 1 unique_start_positions_coverage 2% 1% 50 50 1096.0 2.84e-01 1.0000000 ns 8.0800 2%, 1% 6 7 8.484000 p = 1 8.6 Manuscript figures legend &lt;- cowplot::get_legend( elite_ave_performance_fig + guides( color=guide_legend(nrow=1), fill=guide_legend(nrow=1) ) + theme( legend.position = &quot;bottom&quot;, legend.box=&quot;horizontal&quot;, legend.justification=&quot;center&quot; ) ) grid &lt;- plot_grid( elite_ave_performance_fig + ggtitle(&quot;Performance over time&quot;) + theme(legend.position=&quot;none&quot;), elite_final_performance_fig + ggtitle(&quot;Final performance&quot;) + theme(), unique_start_position_coverage_fig + ggtitle(&quot;Activation position coverage over time&quot;) + theme(legend.position=&quot;none&quot;), unique_start_positions_coverage_final_fig + ggtitle(&quot;Final activation position coverage&quot;) + theme(), nrow=2, ncol=2, rel_widths=c(3,2), labels=&quot;auto&quot; ) grid &lt;- plot_grid( grid, legend, nrow=2, ncol=1, rel_heights=c(1, 0.1) ) save_plot( paste(working_directory, &quot;imgs/down-sampled-panel.pdf&quot;, sep=&quot;&quot;), grid, base_width=12, base_height=8 ) grid "],["down-sampled-lexicase-with-increased-population-size.html", "Chapter 9 Down-sampled lexicase with increased population size 9.1 Overview 9.2 Analysis dependencies 9.3 Setup 9.4 Exploration diagnostic performance 9.5 Activation position coverage 9.6 Manuscript figures", " Chapter 9 Down-sampled lexicase with increased population size 9.1 Overview # Relative location of data. working_directory &lt;- &quot;experiments/2021-06-14-downsampled-pop-size/analysis/&quot; # working_directory &lt;- &quot;./&quot; # Settings for visualization cb_palette &lt;- &quot;Set2&quot; # Create directory to dump plots dir.create(paste0(working_directory, &quot;imgs&quot;), showWarnings=FALSE) 9.2 Analysis dependencies library(ggplot2) library(tidyverse) library(knitr) library(cowplot) library(viridis) library(RColorBrewer) library(rstatix) library(ggsignif) library(Hmisc) library(kableExtra) source(&quot;https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R&quot;) These analyses were conducted in the following computing environment: print(version) ## _ ## platform x86_64-pc-linux-gnu ## arch x86_64 ## os linux-gnu ## system x86_64, linux-gnu ## status ## major 4 ## minor 1.0 ## year 2021 ## month 05 ## day 18 ## svn rev 80317 ## language R ## version.string R version 4.1.0 (2021-05-18) ## nickname Camp Pontanezen 9.3 Setup data_loc &lt;- paste0(working_directory, &quot;data/timeseries.csv&quot;) data &lt;- read.csv(data_loc, na.strings=&quot;NONE&quot;) data$cardinality &lt;- as.factor( data$OBJECTIVE_CNT ) data$selection_name &lt;- as.factor( data$selection_name ) data$epsilon &lt;- as.factor( data$LEX_EPS ) data$proportion &lt;- factor( data$DSLEX_PROP, levels=c(1, 0.5, 0.2, 0.1, 0.05, 0.02, 0.01) ) data$POP_SIZE &lt;- factor( data$POP_SIZE ) data &lt;- filter(data, proportion %in% c(1, 0.5, 0.2, 0.1)) data$proportion &lt;- factor( data$DSLEX_PROP, levels=c(1, 0.5, 0.2, 0.1) ) data$elite_trait_avg &lt;- data$ele_agg_per / data$OBJECTIVE_CNT data$unique_start_positions_coverage &lt;- data$uni_str_pos / data$OBJECTIVE_CNT final_data &lt;- filter(data, evaluations==max(data$evaluations)) # Labeler for stats annotations p_label &lt;- function(p_value) { threshold = 0.0001 if (p_value &lt; threshold) { return(paste0(&quot;p &lt; &quot;, threshold)) } else { return(paste0(&quot;p = &quot;, p_value)) } } # Significance threshold alpha &lt;- 0.05 ####### misc ####### # Configure our default graphing theme theme_set(theme_cowplot()) 9.4 Exploration diagnostic performance elite_ave_performance_fig &lt;- ggplot( data, aes( x=gen, y=elite_trait_avg, color=proportion, fill=proportion ) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Average trait performance&quot;, limits=c(0, 100) ) + scale_x_continuous( name=&quot;Generations&quot; ) + scale_fill_brewer( name=&quot;Down-sampling rate&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Down-sampling rate&quot;, palette=cb_palette ) elite_ave_performance_fig 9.4.1 Final performance # Compute manual labels for geom_signif stat.test &lt;- final_data %&gt;% wilcox_test(elite_trait_avg ~ proportion) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;proportion&quot;,step.increase=1) stat.test$label &lt;- mapply(p_label,stat.test$p.adj) elite_final_performance_fig &lt;- ggplot( final_data, aes(x=proportion, y=elite_trait_avg, fill=proportion) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8, scale=&quot;width&quot; ) + geom_point( mapping=aes(color=proportion), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_y_continuous( name=&quot;Average trait performance&quot;, limits=c(0, 100) ) + scale_x_discrete( name=&quot;Down-sampling rate&quot; ) + scale_fill_brewer( name=&quot;Down-sampling rate&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Down-sampling rate&quot;, palette=cb_palette ) + theme( legend.position=&quot;none&quot; ) elite_final_performance_fig stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax label elite_trait_avg 1 0.5 50 50 2500 0.00e+00 0.0000000 **** 178.4180 1 , 0.5 1 2 p &lt; 1e-04 elite_trait_avg 1 0.2 50 50 2500 0.00e+00 0.0000000 **** 274.7492 1 , 0.2 1 3 p &lt; 1e-04 elite_trait_avg 1 0.1 50 50 2500 0.00e+00 0.0000000 **** 371.0804 1 , 0.1 1 4 p &lt; 1e-04 elite_trait_avg 0.5 0.2 50 50 1840 4.82e-05 0.0002892 *** 467.4116 0.5, 0.2 2 3 p = 0.0002892 elite_trait_avg 0.5 0.1 50 50 2229 0.00e+00 0.0000000 **** 563.7428 0.5, 0.1 2 4 p &lt; 1e-04 elite_trait_avg 0.2 0.1 50 50 1775 2.99e-04 0.0017940 ** 660.0740 0.2, 0.1 3 4 p = 0.001794 9.5 Activation position coverage unique_start_position_coverage_fig &lt;- ggplot( data, aes( x=gen, y=unique_start_positions_coverage, color=proportion, fill=proportion ) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Activation position coverage&quot;, limits=c(0.0, 1.0) ) + scale_x_continuous( name=&quot;Generations&quot; ) + scale_fill_brewer( name=&quot;Down-sampling rate&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Down-sampling rate&quot;, palette=cb_palette ) unique_start_position_coverage_fig 9.5.1 Final activation position coverage # Compute manual labels for geom_signif stat.test &lt;- final_data %&gt;% wilcox_test(unique_start_positions_coverage ~ proportion) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;proportion&quot;,step.increase=1) stat.test$label &lt;- mapply(p_label,stat.test$p.adj) unique_start_positions_coverage_final_fig &lt;- ggplot( final_data, aes( x=proportion, y=unique_start_positions_coverage, fill=proportion ) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8, scale=&quot;width&quot; ) + geom_point( mapping=aes(color=proportion), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_y_continuous( name=&quot;Activation position coverage&quot;, limits=c(0, 1.0) ) + scale_x_discrete( name=&quot;Down-sampling rate&quot; ) + scale_fill_brewer( name=&quot;Down-sampling rate&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Down-sampling rate&quot;, palette=cb_palette ) + theme( legend.position=&quot;none&quot; ) unique_start_positions_coverage_final_fig stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax label unique_start_positions_coverage 1 0.5 50 50 2500.0 0.000 0 **** 0.740 1 , 0.5 1 2 p &lt; 1e-04 unique_start_positions_coverage 1 0.2 50 50 2471.0 0.000 0 **** 1.124 1 , 0.2 1 3 p &lt; 1e-04 unique_start_positions_coverage 1 0.1 50 50 2500.0 0.000 0 **** 1.508 1 , 0.1 1 4 p &lt; 1e-04 unique_start_positions_coverage 0.5 0.2 50 50 348.5 0.000 0 **** 1.892 0.5, 0.2 2 3 p &lt; 1e-04 unique_start_positions_coverage 0.5 0.1 50 50 343.5 0.000 0 **** 2.276 0.5, 0.1 2 4 p &lt; 1e-04 unique_start_positions_coverage 0.2 0.1 50 50 1372.5 0.397 1 ns 2.660 0.2, 0.1 3 4 p = 1 9.6 Manuscript figures legend &lt;- cowplot::get_legend( elite_ave_performance_fig + guides( color=guide_legend(nrow=1), fill=guide_legend(nrow=1) ) + theme( legend.position = &quot;bottom&quot;, legend.box=&quot;horizontal&quot;, legend.justification=&quot;center&quot; ) ) grid &lt;- plot_grid( elite_ave_performance_fig + ggtitle(&quot;Performance over time&quot;) + theme(legend.position=&quot;none&quot;), elite_final_performance_fig + ggtitle(&quot;Final performance&quot;) + theme(), unique_start_position_coverage_fig + ggtitle(&quot;Activation position coverage over time&quot;) + theme(legend.position=&quot;none&quot;), unique_start_positions_coverage_final_fig + ggtitle(&quot;Final activation position coverage&quot;) + theme(), nrow=2, ncol=2, rel_widths=c(3,2), labels=&quot;auto&quot; ) grid &lt;- plot_grid( grid, legend, nrow=2, ncol=1, rel_heights=c(1, 0.1) ) save_plot( paste(working_directory, &quot;imgs/down-sampled-pop-size-panel.pdf&quot;, sep=&quot;&quot;), grid, base_width=12, base_height=8 ) grid "],["cohort-lexicase.html", "Chapter 10 Cohort lexicase 10.1 Overview 10.2 Analysis dependencies 10.3 Setup 10.4 Exploration diagnostic performance 10.5 Activation position coverage 10.6 Manuscript figures", " Chapter 10 Cohort lexicase 10.1 Overview # Relative location of data. working_directory &lt;- &quot;experiments/2021-06-01-cohort/analysis/&quot; # working_directory &lt;- &quot;./&quot; # Settings for visualization cb_palette &lt;- &quot;Set2&quot; # Create directory to dump plots dir.create(paste0(working_directory, &quot;imgs&quot;), showWarnings=FALSE) 10.2 Analysis dependencies library(ggplot2) library(tidyverse) library(knitr) library(cowplot) library(viridis) library(RColorBrewer) library(rstatix) library(ggsignif) library(Hmisc) library(kableExtra) source(&quot;https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R&quot;) These analyses were conducted in the following computing environment: print(version) ## _ ## platform x86_64-pc-linux-gnu ## arch x86_64 ## os linux-gnu ## system x86_64, linux-gnu ## status ## major 4 ## minor 1.0 ## year 2021 ## month 05 ## day 18 ## svn rev 80317 ## language R ## version.string R version 4.1.0 (2021-05-18) ## nickname Camp Pontanezen 10.3 Setup data_loc &lt;- paste0(working_directory, &quot;data/timeseries.csv&quot;) data &lt;- read.csv(data_loc, na.strings=&quot;NONE&quot;) data$cardinality &lt;- as.factor( data$OBJECTIVE_CNT ) data$selection_name &lt;- as.factor( data$selection_name ) data$epsilon &lt;- as.factor( data$LEX_EPS ) data$proportion &lt;- factor( data$COH_LEX_PROP, levels=c(1, 0.5, 0.2, 0.1, 0.05, 0.02, 0.01) ) data$elite_trait_avg &lt;- data$ele_agg_per / data$OBJECTIVE_CNT data$unique_start_positions_coverage &lt;- data$uni_str_pos / data$OBJECTIVE_CNT final_data &lt;- filter(data, evaluations==max(data$evaluations)) # Labeler for stats annotations p_label &lt;- function(p_value) { threshold = 0.0001 if (p_value &lt; threshold) { return(paste0(&quot;p &lt; &quot;, threshold)) } else { return(paste0(&quot;p = &quot;, p_value)) } } # Significance threshold alpha &lt;- 0.05 ####### misc ####### # Configure our default graphing theme theme_set(theme_cowplot()) 10.4 Exploration diagnostic performance elite_ave_performance_fig &lt;- ggplot( data, aes( x=evaluations, y=elite_trait_avg, color=proportion, fill=proportion ) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Average trait performance&quot;, limits=c(0, 100) ) + scale_x_continuous( name=&quot;Evaluations&quot; ) + scale_fill_brewer( name=&quot;Cohort size&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Cohort size&quot;, palette=cb_palette ) elite_ave_performance_fig 10.4.1 Final performance # Compute manual labels for geom_signif stat.test &lt;- final_data %&gt;% wilcox_test(elite_trait_avg ~ proportion) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;proportion&quot;,step.increase=1) stat.test$manual_position &lt;- stat.test$y.position * 1.05 stat.test$label &lt;- mapply(p_label,stat.test$p.adj) elite_final_performance_fig &lt;- ggplot( final_data, aes(x=proportion, y=elite_trait_avg, fill=proportion) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8, scale=&quot;width&quot; ) + geom_point( mapping=aes(color=proportion), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_y_continuous( name=&quot;Average trait performance&quot;, limits=c(0, 100) ) + scale_x_discrete( name=&quot;Cohort size&quot; ) + scale_fill_brewer( name=&quot;Cohort size&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Cohort size&quot;, palette=cb_palette ) + theme( legend.position=&quot;none&quot; ) elite_final_performance_fig stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax manual_position label elite_trait_avg 1 0.5 50 50 2173 0 0 **** 183.9910 1 , 0.5 1 2 193.1906 p &lt; 1e-04 elite_trait_avg 1 0.2 50 50 2489 0 0 **** 274.1178 1 , 0.2 1 3 287.8236 p &lt; 1e-04 elite_trait_avg 1 0.1 50 50 2500 0 0 **** 364.2445 1 , 0.1 1 4 382.4567 p &lt; 1e-04 elite_trait_avg 1 0.05 50 50 2500 0 0 **** 454.3712 1 , 0.05 1 5 477.0898 p &lt; 1e-04 elite_trait_avg 1 0.02 50 50 2500 0 0 **** 544.4980 1 , 0.02 1 6 571.7229 p &lt; 1e-04 elite_trait_avg 1 0.01 50 50 2500 0 0 **** 634.6247 1 , 0.01 1 7 666.3560 p &lt; 1e-04 elite_trait_avg 0.5 0.2 50 50 2333 0 0 **** 724.7515 0.5, 0.2 2 3 760.9891 p &lt; 1e-04 elite_trait_avg 0.5 0.1 50 50 2500 0 0 **** 814.8782 0.5, 0.1 2 4 855.6222 p &lt; 1e-04 elite_trait_avg 0.5 0.05 50 50 2500 0 0 **** 905.0050 0.5 , 0.05 2 5 950.2553 p &lt; 1e-04 elite_trait_avg 0.5 0.02 50 50 2500 0 0 **** 995.1318 0.5 , 0.02 2 6 1044.8883 p &lt; 1e-04 elite_trait_avg 0.5 0.01 50 50 2500 0 0 **** 1085.2585 0.5 , 0.01 2 7 1139.5214 p &lt; 1e-04 elite_trait_avg 0.2 0.1 50 50 2450 0 0 **** 1175.3853 0.2, 0.1 3 4 1234.1545 p &lt; 1e-04 elite_trait_avg 0.2 0.05 50 50 2500 0 0 **** 1265.5120 0.2 , 0.05 3 5 1328.7876 p &lt; 1e-04 elite_trait_avg 0.2 0.02 50 50 2500 0 0 **** 1355.6388 0.2 , 0.02 3 6 1423.4207 p &lt; 1e-04 elite_trait_avg 0.2 0.01 50 50 2500 0 0 **** 1445.7655 0.2 , 0.01 3 7 1518.0538 p &lt; 1e-04 elite_trait_avg 0.1 0.05 50 50 2500 0 0 **** 1535.8923 0.1 , 0.05 4 5 1612.6869 p &lt; 1e-04 elite_trait_avg 0.1 0.02 50 50 2500 0 0 **** 1626.0190 0.1 , 0.02 4 6 1707.3200 p &lt; 1e-04 elite_trait_avg 0.1 0.01 50 50 2500 0 0 **** 1716.1457 0.1 , 0.01 4 7 1801.9530 p &lt; 1e-04 elite_trait_avg 0.05 0.02 50 50 2456 0 0 **** 1806.2725 0.05, 0.02 5 6 1896.5861 p &lt; 1e-04 elite_trait_avg 0.05 0.01 50 50 2500 0 0 **** 1896.3992 0.05, 0.01 5 7 1991.2192 p &lt; 1e-04 elite_trait_avg 0.02 0.01 50 50 2343 0 0 **** 1986.5260 0.02, 0.01 6 7 2085.8523 p &lt; 1e-04 10.5 Activation position coverage unique_start_position_coverage_fig &lt;- ggplot( data, aes( x=evaluations, y=unique_start_positions_coverage, color=proportion, fill=proportion ) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Activation position coverage&quot;, limits=c(0.0, 1.0) ) + scale_x_continuous( name=&quot;Evaluations&quot; ) + scale_fill_brewer( name=&quot;Cohort size&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Cohort size&quot;, palette=cb_palette ) unique_start_position_coverage_fig 10.5.1 Final activation position coverage # Compute manual labels for geom_signif stat.test &lt;- final_data %&gt;% wilcox_test(unique_start_positions_coverage ~ proportion) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;proportion&quot;,step.increase=1) stat.test$manual_position &lt;- stat.test$y.position * 1.05 stat.test$label &lt;- mapply(p_label,stat.test$p.adj) unique_start_positions_coverage_final_fig &lt;- ggplot( final_data, aes( x=proportion, y=unique_start_positions_coverage, fill=proportion ) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8, scale=&quot;width&quot; ) + geom_point( mapping=aes(color=proportion), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_y_continuous( name=&quot;Activation position coverage&quot;, limits=c(0, 1.0) ) + scale_x_discrete( name=&quot;Cohort size&quot; ) + scale_fill_brewer( name=&quot;Cohort size&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Cohort size&quot;, palette=cb_palette ) + theme( legend.position=&quot;none&quot; ) unique_start_positions_coverage_final_fig stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax manual_position label unique_start_positions_coverage 1 0.5 50 50 2492.0 0.00e+00 0.0000000 **** 0.680 1 , 0.5 1 2 0.7140 p &lt; 1e-04 unique_start_positions_coverage 1 0.2 50 50 2500.0 0.00e+00 0.0000000 **** 0.974 1 , 0.2 1 3 1.0227 p &lt; 1e-04 unique_start_positions_coverage 1 0.1 50 50 2500.0 0.00e+00 0.0000000 **** 1.268 1 , 0.1 1 4 1.3314 p &lt; 1e-04 unique_start_positions_coverage 1 0.05 50 50 2500.0 0.00e+00 0.0000000 **** 1.562 1 , 0.05 1 5 1.6401 p &lt; 1e-04 unique_start_positions_coverage 1 0.02 50 50 2500.0 0.00e+00 0.0000000 **** 1.856 1 , 0.02 1 6 1.9488 p &lt; 1e-04 unique_start_positions_coverage 1 0.01 50 50 2500.0 0.00e+00 0.0000000 **** 2.150 1 , 0.01 1 7 2.2575 p &lt; 1e-04 unique_start_positions_coverage 0.5 0.2 50 50 2412.5 0.00e+00 0.0000000 **** 2.444 0.5, 0.2 2 3 2.5662 p &lt; 1e-04 unique_start_positions_coverage 0.5 0.1 50 50 2492.5 0.00e+00 0.0000000 **** 2.738 0.5, 0.1 2 4 2.8749 p &lt; 1e-04 unique_start_positions_coverage 0.5 0.05 50 50 2500.0 0.00e+00 0.0000000 **** 3.032 0.5 , 0.05 2 5 3.1836 p &lt; 1e-04 unique_start_positions_coverage 0.5 0.02 50 50 2499.5 0.00e+00 0.0000000 **** 3.326 0.5 , 0.02 2 6 3.4923 p &lt; 1e-04 unique_start_positions_coverage 0.5 0.01 50 50 2417.5 0.00e+00 0.0000000 **** 3.620 0.5 , 0.01 2 7 3.8010 p &lt; 1e-04 unique_start_positions_coverage 0.2 0.1 50 50 2216.5 0.00e+00 0.0000000 **** 3.914 0.2, 0.1 3 4 4.1097 p &lt; 1e-04 unique_start_positions_coverage 0.2 0.05 50 50 2469.0 0.00e+00 0.0000000 **** 4.208 0.2 , 0.05 3 5 4.4184 p &lt; 1e-04 unique_start_positions_coverage 0.2 0.02 50 50 2416.5 0.00e+00 0.0000000 **** 4.502 0.2 , 0.02 3 6 4.7271 p &lt; 1e-04 unique_start_positions_coverage 0.2 0.01 50 50 1834.0 5.05e-05 0.0010605 ** 4.796 0.2 , 0.01 3 7 5.0358 p = 0.0010605 unique_start_positions_coverage 0.1 0.05 50 50 2044.0 0.00e+00 0.0000007 **** 5.090 0.1 , 0.05 4 5 5.3445 p &lt; 1e-04 unique_start_positions_coverage 0.1 0.02 50 50 1781.5 2.17e-04 0.0045570 ** 5.384 0.1 , 0.02 4 6 5.6532 p = 0.004557 unique_start_positions_coverage 0.1 0.01 50 50 812.0 2.00e-03 0.0420000 5.678 0.1 , 0.01 4 7 5.9619 p = 0.042 unique_start_positions_coverage 0.05 0.02 50 50 902.5 1.50e-02 0.3150000 ns 5.972 0.05, 0.02 5 6 6.2706 p = 0.315 unique_start_positions_coverage 0.05 0.01 50 50 242.0 0.00e+00 0.0000000 **** 6.266 0.05, 0.01 5 7 6.5793 p &lt; 1e-04 unique_start_positions_coverage 0.02 0.01 50 50 405.5 0.00e+00 0.0000001 **** 6.560 0.02, 0.01 6 7 6.8880 p &lt; 1e-04 10.6 Manuscript figures legend &lt;- cowplot::get_legend( elite_ave_performance_fig + guides( color=guide_legend(nrow=1), fill=guide_legend(nrow=1) ) + theme( legend.position = &quot;bottom&quot;, legend.box=&quot;horizontal&quot;, legend.justification=&quot;center&quot; ) ) grid &lt;- plot_grid( elite_ave_performance_fig + ggtitle(&quot;Performance over time&quot;) + theme(legend.position=&quot;none&quot;), elite_final_performance_fig + ggtitle(&quot;Final performance&quot;) + theme(), unique_start_position_coverage_fig + ggtitle(&quot;Activation position coverage over time&quot;) + theme(legend.position=&quot;none&quot;), unique_start_positions_coverage_final_fig + ggtitle(&quot;Final activation position coverage&quot;) + theme(), nrow=2, ncol=2, rel_widths=c(3,2), labels=&quot;auto&quot; ) grid &lt;- plot_grid( grid, legend, nrow=2, ncol=1, rel_heights=c(1, 0.1) ) save_plot( paste(working_directory, &quot;imgs/cohort-panel.pdf&quot;, sep=&quot;&quot;), grid, base_width=12, base_height=8 ) grid "],["cohort-lexicase-with-increased-population-size.html", "Chapter 11 Cohort lexicase with increased population size 11.1 Overview 11.2 Analysis dependencies 11.3 Setup 11.4 Exploration diagnostic performance 11.5 Activation position coverage 11.6 Manuscript figures", " Chapter 11 Cohort lexicase with increased population size 11.1 Overview # Relative location of data. working_directory &lt;- &quot;experiments/2021-06-14-cohort-pop-size/analysis/&quot; # working_directory &lt;- &quot;./&quot; # Settings for visualization cb_palette &lt;- &quot;Set2&quot; # Create directory to dump plots dir.create(paste0(working_directory, &quot;imgs&quot;), showWarnings=FALSE) 11.2 Analysis dependencies library(ggplot2) library(tidyverse) library(knitr) library(cowplot) library(viridis) library(RColorBrewer) library(rstatix) library(ggsignif) library(Hmisc) library(kableExtra) source(&quot;https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R&quot;) These analyses were conducted in the following computing environment: print(version) ## _ ## platform x86_64-pc-linux-gnu ## arch x86_64 ## os linux-gnu ## system x86_64, linux-gnu ## status ## major 4 ## minor 1.0 ## year 2021 ## month 05 ## day 18 ## svn rev 80317 ## language R ## version.string R version 4.1.0 (2021-05-18) ## nickname Camp Pontanezen 11.3 Setup data_loc &lt;- paste0(working_directory, &quot;data/timeseries.csv&quot;) data &lt;- read.csv(data_loc, na.strings=&quot;NONE&quot;) data$cardinality &lt;- as.factor( data$OBJECTIVE_CNT ) data$selection_name &lt;- as.factor( data$selection_name ) data$epsilon &lt;- as.factor( data$LEX_EPS ) data$proportion &lt;- factor( data$COH_LEX_PROP, levels=c(1, 0.5, 0.2, 0.1, 0.05, 0.02, 0.01) ) data$POP_SIZE &lt;- factor( data$POP_SIZE ) data &lt;- filter(data, proportion %in% c(1, 0.5, 0.2, 0.1)) data$proportion &lt;- factor( data$COH_LEX_PROP, levels=c(1, 0.5, 0.2, 0.1) ) data$elite_trait_avg &lt;- data$ele_agg_per / data$OBJECTIVE_CNT data$unique_start_positions_coverage &lt;- data$uni_str_pos / data$OBJECTIVE_CNT final_data &lt;- filter(data, evaluations==max(data$evaluations)) # Labeler for stats annotations p_label &lt;- function(p_value) { threshold = 0.0001 if (p_value &lt; threshold) { return(paste0(&quot;p &lt; &quot;, threshold)) } else { return(paste0(&quot;p = &quot;, p_value)) } } # Significance threshold alpha &lt;- 0.05 ####### misc ####### # Configure our default graphing theme theme_set(theme_cowplot()) 11.4 Exploration diagnostic performance elite_ave_performance_fig &lt;- ggplot( data, aes( x=gen, y=elite_trait_avg, color=proportion, fill=proportion ) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Average trait performance&quot;, limits=c(0, 100) ) + scale_x_continuous( name=&quot;Generations&quot; ) + scale_fill_brewer( name=&quot;Cohort size&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Cohort size&quot;, palette=cb_palette ) elite_ave_performance_fig 11.4.1 Final performance # Compute manual labels for geom_signif stat.test &lt;- final_data %&gt;% wilcox_test(elite_trait_avg ~ proportion) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;proportion&quot;,step.increase=1) stat.test$label &lt;- mapply(p_label,stat.test$p.adj) elite_final_performance_fig &lt;- ggplot( final_data, aes(x=proportion, y=elite_trait_avg, fill=proportion) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8, scale=&quot;width&quot; ) + geom_point( mapping=aes(color=proportion), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_y_continuous( name=&quot;Average trait performance&quot;, limits=c(0, 100) ) + scale_x_discrete( name=&quot;Cohort size&quot; ) + scale_fill_brewer( name=&quot;Cohort size&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Cohort size&quot;, palette=cb_palette ) + theme( legend.position=&quot;none&quot; ) elite_final_performance_fig stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax label elite_trait_avg 1 0.5 50 50 1102 3.09e-01 1.00e+00 ns 114.0560 1 , 0.5 1 2 p = 1 elite_trait_avg 1 0.2 50 50 1905 6.40e-06 3.85e-05 **** 133.4684 1 , 0.2 1 3 p &lt; 1e-04 elite_trait_avg 1 0.1 50 50 2478 0.00e+00 0.00e+00 **** 152.8808 1 , 0.1 1 4 p &lt; 1e-04 elite_trait_avg 0.5 0.2 50 50 2012 2.00e-07 9.00e-07 **** 172.2932 0.5, 0.2 2 3 p &lt; 1e-04 elite_trait_avg 0.5 0.1 50 50 2500 0.00e+00 0.00e+00 **** 191.7056 0.5, 0.1 2 4 p &lt; 1e-04 elite_trait_avg 0.2 0.1 50 50 2478 0.00e+00 0.00e+00 **** 211.1180 0.2, 0.1 3 4 p &lt; 1e-04 11.5 Activation position coverage unique_start_position_coverage_fig &lt;- ggplot( data, aes( x=gen, y=unique_start_positions_coverage, color=proportion, fill=proportion ) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Activation position coverage&quot;, limits=c(0.0, 1.0) ) + scale_x_continuous( name=&quot;Generations&quot; ) + scale_fill_brewer( name=&quot;Cohort size&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Cohort size&quot;, palette=cb_palette ) unique_start_position_coverage_fig 11.5.1 Final activation position coverage # Compute manual labels for geom_signif stat.test &lt;- final_data %&gt;% wilcox_test(unique_start_positions_coverage ~ proportion) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;proportion&quot;,step.increase=1) stat.test$label &lt;- mapply(p_label,stat.test$p.adj) unique_start_positions_coverage_final_fig &lt;- ggplot( final_data, aes( x=proportion, y=unique_start_positions_coverage, fill=proportion ) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8, scale=&quot;width&quot; ) + geom_point( mapping=aes(color=proportion), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_y_continuous( name=&quot;Activation position coverage&quot;, limits=c(0, 1.0) ) + scale_x_discrete( name=&quot;Cohort size&quot; ) + scale_fill_brewer( name=&quot;Cohort size&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;Cohort size&quot;, palette=cb_palette ) + theme( legend.position=&quot;none&quot; ) unique_start_positions_coverage_final_fig stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax label unique_start_positions_coverage 1 0.5 50 50 586.0 4.4e-06 2.66e-05 **** 0.70 1 , 0.5 1 2 p &lt; 1e-04 unique_start_positions_coverage 1 0.2 50 50 51.5 0.0e+00 0.00e+00 **** 0.88 1 , 0.2 1 3 p &lt; 1e-04 unique_start_positions_coverage 1 0.1 50 50 4.5 0.0e+00 0.00e+00 **** 1.06 1 , 0.1 1 4 p &lt; 1e-04 unique_start_positions_coverage 0.5 0.2 50 50 150.5 0.0e+00 0.00e+00 **** 1.24 0.5, 0.2 2 3 p &lt; 1e-04 unique_start_positions_coverage 0.5 0.1 50 50 13.5 0.0e+00 0.00e+00 **** 1.42 0.5, 0.1 2 4 p &lt; 1e-04 unique_start_positions_coverage 0.2 0.1 50 50 334.0 0.0e+00 0.00e+00 **** 1.60 0.2, 0.1 3 4 p &lt; 1e-04 11.6 Manuscript figures legend &lt;- cowplot::get_legend( elite_ave_performance_fig + guides( color=guide_legend(nrow=1), fill=guide_legend(nrow=1) ) + theme( legend.position = &quot;bottom&quot;, legend.box=&quot;horizontal&quot;, legend.justification=&quot;center&quot; ) ) grid &lt;- plot_grid( elite_ave_performance_fig + ggtitle(&quot;Performance over time&quot;) + theme(legend.position=&quot;none&quot;), elite_final_performance_fig + ggtitle(&quot;Final performance&quot;) + theme(), unique_start_position_coverage_fig + ggtitle(&quot;Activation position coverage over time&quot;) + theme(legend.position=&quot;none&quot;), unique_start_positions_coverage_final_fig + ggtitle(&quot;Final activation position coverage&quot;) + theme(), nrow=2, ncol=2, rel_widths=c(3,2), labels=&quot;auto&quot; ) grid &lt;- plot_grid( grid, legend, nrow=2, ncol=1, rel_heights=c(1, 0.1) ) save_plot( paste(working_directory, &quot;imgs/cohort-pop-size-panel.pdf&quot;, sep=&quot;&quot;), grid, base_width=12, base_height=8 ) grid "],["down-sampled-lexicase-versus-cohort-lexicase.html", "Chapter 12 Down-sampled lexicase versus cohort lexicase 12.1 Overview 12.2 Analysis dependencies 12.3 Setup 12.4 Exploration diagnostic performance 12.5 Activation position coverage 12.6 Manuscript figures", " Chapter 12 Down-sampled lexicase versus cohort lexicase 12.1 Overview # Relative location of data. working_directory &lt;- &quot;experiments/2021-06-05-downsample-vs-cohort/analysis/&quot; # working_directory &lt;- &quot;./&quot; # Settings for visualization cb_palette &lt;- &quot;Dark2&quot; # Create directory to dump plots dir.create(paste0(working_directory, &quot;imgs&quot;), showWarnings=FALSE) 12.2 Analysis dependencies library(ggplot2) library(tidyverse) library(knitr) library(cowplot) library(viridis) library(RColorBrewer) library(rstatix) library(ggsignif) library(Hmisc) library(kableExtra) source(&quot;https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R&quot;) These analyses were conducted in the following computing environment: print(version) ## _ ## platform x86_64-pc-linux-gnu ## arch x86_64 ## os linux-gnu ## system x86_64, linux-gnu ## status ## major 4 ## minor 1.0 ## year 2021 ## month 05 ## day 18 ## svn rev 80317 ## language R ## version.string R version 4.1.0 (2021-05-18) ## nickname Camp Pontanezen 12.3 Setup data_loc &lt;- paste0(working_directory, &quot;data/timeseries.csv&quot;) data &lt;- read.csv(data_loc, na.strings=&quot;NONE&quot;) data$cardinality &lt;- as.factor( data$OBJECTIVE_CNT ) data$selection_name &lt;- as.factor( data$selection_name ) data$epsilon &lt;- as.factor( data$LEX_EPS ) # I always set cohort and downsampled lexicase sampling rates to # be the same on a given run (regardless of selection scheme) data$proportion &lt;- factor( data$COH_LEX_PROP, levels=c(1, 0.5, 0.2, 0.1, 0.05, 0.02, 0.01) ) data$elite_trait_avg &lt;- data$ele_agg_per / data$OBJECTIVE_CNT data$unique_start_positions_coverage &lt;- data$uni_str_pos / data$OBJECTIVE_CNT final_data &lt;- filter(data, evaluations==max(data$evaluations)) # Labeler for stats annotations p_label &lt;- function(p_value) { threshold = 0.0001 if (p_value &lt; threshold) { return(paste0(&quot;p &lt; &quot;, threshold)) } else { return(paste0(&quot;p = &quot;, p_value)) } } # Significance threshold alpha &lt;- 0.05 ####### misc ####### # Configure our default graphing theme theme_set(theme_cowplot()) 12.4 Exploration diagnostic performance elite_ave_performance_fig &lt;- ggplot( data, aes( x=gen, y=elite_trait_avg, color=selection_name, fill=selection_name ) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Average trait performance&quot;, limits=c(0, 100) ) + scale_x_continuous( name=&quot;Generations&quot; ) + scale_fill_brewer( name=&quot;Selection&quot;, palette=cb_palette, limits=c(&quot;CohortLexicase&quot;, &quot;DownSampledLexicase&quot;), labels=c(&quot;Cohort lexicase&quot;, &quot;Down-sampled lexicase&quot;) ) + scale_color_brewer( name=&quot;Selection&quot;, palette=cb_palette, limits=c(&quot;CohortLexicase&quot;, &quot;DownSampledLexicase&quot;), labels=c(&quot;Cohort lexicase&quot;, &quot;Down-sampled lexicase&quot;) ) elite_ave_performance_fig 12.4.1 Final performance # Compute manual labels for geom_signif stat.test &lt;- final_data %&gt;% wilcox_test(elite_trait_avg ~ selection_name) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;selection_name&quot;,step.increase=1) stat.test$manual_position &lt;- stat.test$y.position * 1.05 stat.test$label &lt;- mapply(p_label,stat.test$p.adj) elite_final_performance_fig &lt;- ggplot( final_data, aes(x=selection_name, y=elite_trait_avg, fill=selection_name) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8, scale=&quot;width&quot; ) + geom_point( mapping=aes(color=selection_name), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_y_continuous( name=&quot;Average trait performance&quot;, limits=c(0, 100) ) + scale_x_discrete( name=&quot;Selection&quot;, limits=c(&quot;CohortLexicase&quot;, &quot;DownSampledLexicase&quot;), labels=c(&quot;Cohort lexicase&quot;, &quot;Down-sampled lexicase&quot;) ) + scale_fill_brewer( name=&quot;Selection&quot;, palette=cb_palette, limits=c(&quot;CohortLexicase&quot;, &quot;DownSampledLexicase&quot;), labels=c(&quot;Cohort lexicase&quot;, &quot;Down-sampled lexicase&quot;) ) + scale_color_brewer( name=&quot;Selection&quot;, palette=cb_palette, limits=c(&quot;CohortLexicase&quot;, &quot;DownSampledLexicase&quot;), labels=c(&quot;Cohort lexicase&quot;, &quot;Down-sampled lexicase&quot;) ) + theme( legend.position=&quot;none&quot; ) elite_final_performance_fig stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax manual_position label elite_trait_avg CohortLexicase DownSampledLexicase 50 50 2500 0 0 **** 150.227 CohortLexicase , DownSampledLexicase 1 2 157.7383 p &lt; 1e-04 12.5 Activation position coverage unique_start_position_coverage_fig &lt;- ggplot( data, aes( x=gen, y=unique_start_positions_coverage, color=selection_name, fill=selection_name ) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Activation position coverage&quot;, limits=c(0.0, 1.0) ) + scale_x_continuous( name=&quot;Generations&quot; ) + scale_fill_brewer( name=&quot;Selection&quot;, palette=cb_palette, limits=c(&quot;CohortLexicase&quot;, &quot;DownSampledLexicase&quot;), labels=c(&quot;Cohort lexicase&quot;, &quot;Down-sampled lexicase&quot;) ) + scale_color_brewer( name=&quot;Selection&quot;, palette=cb_palette, limits=c(&quot;CohortLexicase&quot;, &quot;DownSampledLexicase&quot;), labels=c(&quot;Cohort lexicase&quot;, &quot;Down-sampled lexicase&quot;) ) unique_start_position_coverage_fig 12.5.1 Final activation position coverage # Compute manual labels for geom_signif stat.test &lt;- final_data %&gt;% wilcox_test(unique_start_positions_coverage ~ selection_name) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;selection_name&quot;,step.increase=1) stat.test$manual_position &lt;- stat.test$y.position * 1.05 stat.test$label &lt;- mapply(p_label,stat.test$p.adj) unique_start_positions_coverage_final_fig &lt;- ggplot( final_data, aes( x=selection_name, y=unique_start_positions_coverage, fill=selection_name ) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8, scale=&quot;width&quot; ) + geom_point( mapping=aes(color=selection_name), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_y_continuous( name=&quot;Activation position coverage&quot;, limits=c(0, 1.0) ) + scale_x_discrete( name=&quot;Selection&quot;, limits=c(&quot;CohortLexicase&quot;, &quot;DownSampledLexicase&quot;), labels=c(&quot;Cohort lexicase&quot;, &quot;Down-sampled lexicase&quot;) ) + scale_fill_brewer( name=&quot;Selection&quot;, palette=cb_palette, limits=c(&quot;CohortLexicase&quot;, &quot;DownSampledLexicase&quot;), labels=c(&quot;Cohort lexicase&quot;, &quot;Down-sampled lexicase&quot;) ) + scale_color_brewer( name=&quot;Selection&quot;, palette=cb_palette, limits=c(&quot;CohortLexicase&quot;, &quot;DownSampledLexicase&quot;), labels=c(&quot;Cohort lexicase&quot;, &quot;Down-sampled lexicase&quot;) ) + theme( legend.position=&quot;none&quot; ) unique_start_positions_coverage_final_fig stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax manual_position label unique_start_positions_coverage CohortLexicase DownSampledLexicase 50 50 2500 0 0 **** 0.42 CohortLexicase , DownSampledLexicase 1 2 0.441 p &lt; 1e-04 12.6 Manuscript figures legend &lt;- cowplot::get_legend( elite_ave_performance_fig + guides( color=guide_legend(nrow=1), fill=guide_legend(nrow=1) ) + theme( legend.position = &quot;bottom&quot;, legend.box=&quot;horizontal&quot;, legend.justification=&quot;center&quot; ) ) grid &lt;- plot_grid( elite_ave_performance_fig + ggtitle(&quot;Performance over time&quot;) + theme(legend.position=&quot;none&quot;), elite_final_performance_fig + ggtitle(&quot;Final performance&quot;) + theme(), unique_start_position_coverage_fig + ggtitle(&quot;Activation position coverage over time&quot;) + theme(legend.position=&quot;none&quot;), unique_start_positions_coverage_final_fig + ggtitle(&quot;Final activation position coverage&quot;) + theme(), nrow=2, ncol=2, rel_widths=c(3,2), labels=&quot;auto&quot; ) grid &lt;- plot_grid( grid, legend, nrow=2, ncol=1, rel_heights=c(1, 0.1) ) save_plot( paste( working_directory, &quot;imgs/down-sampled-vs-cohort-panel.pdf&quot;, sep=&quot;&quot; ), grid, base_width=12, base_height=8 ) grid "],["novelty-lexicase.html", "Chapter 13 Novelty-lexicase 13.1 Overview 13.2 Analysis dependencies 13.3 Setup 13.4 Exploration diagnostic performance 13.5 Activation position coverage 13.6 Manuscript figures", " Chapter 13 Novelty-lexicase 13.1 Overview # Relative location of data. working_directory &lt;- &quot;experiments/2021-06-01-novelty/analysis/&quot; # working_directory &lt;- &quot;./&quot; # Settings for visualization cb_palette &lt;- &quot;Set2&quot; # Create directory to dump plots dir.create(paste0(working_directory, &quot;imgs&quot;), showWarnings=FALSE) 13.2 Analysis dependencies library(ggplot2) library(tidyverse) library(knitr) library(cowplot) library(viridis) library(RColorBrewer) library(rstatix) library(ggsignif) library(Hmisc) library(kableExtra) source(&quot;https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R&quot;) These analyses were conducted in the following computing environment: print(version) ## _ ## platform x86_64-pc-linux-gnu ## arch x86_64 ## os linux-gnu ## system x86_64, linux-gnu ## status ## major 4 ## minor 1.0 ## year 2021 ## month 05 ## day 18 ## svn rev 80317 ## language R ## version.string R version 4.1.0 (2021-05-18) ## nickname Camp Pontanezen 13.3 Setup data_loc &lt;- paste0( working_directory, &quot;data/timeseries-res-1000g.csv&quot; ) data &lt;- read.csv(data_loc, na.strings=&quot;NONE&quot;) data$cardinality &lt;- as.factor( data$OBJECTIVE_CNT ) data$selection_name &lt;- as.factor( data$selection_name ) data$epsilon &lt;- as.factor( data$LEX_EPS ) data$k &lt;- as.factor( data$NOVEL_K ) data$elite_trait_avg &lt;- data$ele_agg_per / data$OBJECTIVE_CNT data$unique_start_positions_coverage &lt;- data$uni_str_pos / data$OBJECTIVE_CNT final_data &lt;- filter(data, evaluations==max(data$evaluations)) # Labeler for stats annotations p_label &lt;- function(p_value) { threshold = 0.0001 if (p_value &lt; threshold) { return(paste0(&quot;p &lt; &quot;, threshold)) } else { return(paste0(&quot;p = &quot;, p_value)) } } # Significance threshold alpha &lt;- 0.05 ####### misc ####### # Configure our default graphing theme theme_set(theme_cowplot()) 13.4 Exploration diagnostic performance elite_ave_performance_fig &lt;- ggplot( data, aes(x=gen, y=elite_trait_avg, color=k, fill=k) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Average trait performance&quot;, limits=c(0, 100) ) + scale_x_continuous( name=&quot;Generations&quot; ) + scale_fill_brewer( name=&quot;k&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;k&quot;, palette=cb_palette ) elite_ave_performance_fig 13.4.1 Final performance # Compute manual labels for geom_signif stat.test &lt;- final_data %&gt;% wilcox_test(elite_trait_avg ~ k) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;k&quot;,step.increase=1) stat.test$manual_position &lt;- stat.test$y.position * 1.05 stat.test$label &lt;- mapply(p_label,stat.test$p.adj) elite_final_performance_fig &lt;- ggplot( final_data, aes(x=k, y=elite_trait_avg, fill=k) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8, scale=&quot;width&quot; ) + geom_point( mapping=aes(color=k), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_y_continuous( name=&quot;Average trait performance&quot;, limits=c(0, 100) ) + scale_x_discrete( name=&quot;k&quot; ) + scale_fill_brewer( name=&quot;k&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;k&quot;, palette=cb_palette ) + theme( legend.position=&quot;none&quot; ) elite_final_performance_fig stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax manual_position label elite_trait_avg 0 1 50 50 2500 0.00e+00 0.0000000 **** 151.8030 0, 1 1 2 159.3931 p &lt; 1e-04 elite_trait_avg 0 2 50 50 2500 0.00e+00 0.0000000 **** 207.8186 0, 2 1 3 218.2095 p &lt; 1e-04 elite_trait_avg 0 4 50 50 2500 0.00e+00 0.0000000 **** 263.8341 0, 4 1 4 277.0258 p &lt; 1e-04 elite_trait_avg 0 8 50 50 2500 0.00e+00 0.0000000 **** 319.8497 0, 8 1 5 335.8422 p &lt; 1e-04 elite_trait_avg 0 15 50 50 2500 0.00e+00 0.0000000 **** 375.8652 0 , 15 1 6 394.6585 p &lt; 1e-04 elite_trait_avg 0 30 50 50 2500 0.00e+00 0.0000000 **** 431.8808 0 , 30 1 7 453.4748 p &lt; 1e-04 elite_trait_avg 0 60 50 50 2500 0.00e+00 0.0000000 **** 487.8963 0 , 60 1 8 512.2912 p &lt; 1e-04 elite_trait_avg 1 2 50 50 2137 0.00e+00 0.0000000 **** 543.9119 1, 2 2 3 571.1075 p &lt; 1e-04 elite_trait_avg 1 4 50 50 2451 0.00e+00 0.0000000 **** 599.9274 1, 4 2 4 629.9238 p &lt; 1e-04 elite_trait_avg 1 8 50 50 2493 0.00e+00 0.0000000 **** 655.9430 1, 8 2 5 688.7401 p &lt; 1e-04 elite_trait_avg 1 15 50 50 2497 0.00e+00 0.0000000 **** 711.9586 1 , 15 2 6 747.5565 p &lt; 1e-04 elite_trait_avg 1 30 50 50 2499 0.00e+00 0.0000000 **** 767.9741 1 , 30 2 7 806.3728 p &lt; 1e-04 elite_trait_avg 1 60 50 50 2467 0.00e+00 0.0000000 **** 823.9897 1 , 60 2 8 865.1892 p &lt; 1e-04 elite_trait_avg 2 4 50 50 2277 0.00e+00 0.0000000 **** 880.0052 2, 4 3 4 924.0055 p &lt; 1e-04 elite_trait_avg 2 8 50 50 2459 0.00e+00 0.0000000 **** 936.0208 2, 8 3 5 982.8218 p &lt; 1e-04 elite_trait_avg 2 15 50 50 2480 0.00e+00 0.0000000 **** 992.0363 2 , 15 3 6 1041.6381 p &lt; 1e-04 elite_trait_avg 2 30 50 50 2494 0.00e+00 0.0000000 **** 1048.0519 2 , 30 3 7 1100.4545 p &lt; 1e-04 elite_trait_avg 2 60 50 50 2341 0.00e+00 0.0000000 **** 1104.0674 2 , 60 3 8 1159.2708 p &lt; 1e-04 elite_trait_avg 4 8 50 50 1988 4.00e-07 0.0000103 **** 1160.0830 4, 8 4 5 1218.0872 p &lt; 1e-04 elite_trait_avg 4 15 50 50 2074 0.00e+00 0.0000004 **** 1216.0986 4 , 15 4 6 1276.9035 p &lt; 1e-04 elite_trait_avg 4 30 50 50 2389 0.00e+00 0.0000000 **** 1272.1141 4 , 30 4 7 1335.7198 p &lt; 1e-04 elite_trait_avg 4 60 50 50 1854 3.18e-05 0.0008904 *** 1328.1297 4 , 60 4 8 1394.5361 p = 0.0008904 elite_trait_avg 8 15 50 50 1343 5.24e-01 1.0000000 ns 1384.1452 8 , 15 5 6 1453.3525 p = 1 elite_trait_avg 8 30 50 50 2159 0.00e+00 0.0000000 **** 1440.1608 8 , 30 5 7 1512.1688 p &lt; 1e-04 elite_trait_avg 8 60 50 50 1346 5.10e-01 1.0000000 ns 1496.1763 8 , 60 5 8 1570.9851 p = 1 elite_trait_avg 15 30 50 50 2127 0.00e+00 0.0000000 **** 1552.1919 15, 30 6 7 1629.8015 p &lt; 1e-04 elite_trait_avg 15 60 50 50 1287 8.01e-01 1.0000000 ns 1608.2074 15, 60 6 8 1688.6178 p = 1 elite_trait_avg 30 60 50 50 515 4.00e-07 0.0000115 **** 1664.2230 30, 60 7 8 1747.4342 p &lt; 1e-04 13.5 Activation position coverage unique_start_position_coverage_fig &lt;- ggplot( data, aes(x=gen, y=unique_start_positions_coverage, color=k, fill=k) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Activation position coverage&quot;, limits=c(0.0, 1.0) ) + scale_x_continuous( name=&quot;Generations&quot; ) + scale_fill_brewer( name=&quot;k&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;k&quot;, palette=cb_palette ) unique_start_position_coverage_fig 13.5.1 Final activation position coverage # Compute manual labels for geom_signif stat.test &lt;- final_data %&gt;% wilcox_test(unique_start_positions_coverage ~ k) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;k&quot;,step.increase=1) stat.test$manual_position &lt;- stat.test$y.position * 1.05 stat.test$label &lt;- mapply(p_label,stat.test$p.adj) unique_start_positions_coverage_final_fig &lt;- ggplot( final_data, aes(x=k, y=unique_start_positions_coverage, fill=k) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8, scale=&quot;width&quot; ) + geom_point( mapping=aes(color=k), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_y_continuous( name=&quot;Activation position coverage&quot;, limits=c(0, 1.0) ) + scale_x_discrete( name=&quot;k&quot; ) + scale_fill_brewer( name=&quot;k&quot;, palette=cb_palette ) + scale_color_brewer( name=&quot;k&quot;, palette=cb_palette ) + theme( legend.position=&quot;none&quot; ) unique_start_positions_coverage_final_fig stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax manual_position label unique_start_positions_coverage 0 1 50 50 2151.0 0.00e+00 0.0000000 **** 0.5200000 0, 1 1 2 0.5460000 p &lt; 1e-04 unique_start_positions_coverage 0 2 50 50 1759.5 4.26e-04 0.0119280 0.6237037 0, 2 1 3 0.6548889 p = 0.011928 unique_start_positions_coverage 0 4 50 50 1806.0 1.19e-04 0.0033320 ** 0.7274074 0, 4 1 4 0.7637778 p = 0.003332 unique_start_positions_coverage 0 8 50 50 1675.0 3.00e-03 0.0840000 ns 0.8311111 0, 8 1 5 0.8726667 p = 0.084 unique_start_positions_coverage 0 15 50 50 1132.0 4.15e-01 1.0000000 ns 0.9348148 0 , 15 1 6 0.9815556 p = 1 unique_start_positions_coverage 0 30 50 50 405.5 0.00e+00 0.0000001 **** 1.0385185 0 , 30 1 7 1.0904444 p &lt; 1e-04 unique_start_positions_coverage 0 60 50 50 692.5 1.13e-04 0.0031640 ** 1.1422222 0 , 60 1 8 1.1993333 p = 0.003164 unique_start_positions_coverage 1 2 50 50 839.0 4.00e-03 0.1120000 ns 1.2459259 1, 2 2 3 1.3082222 p = 0.112 unique_start_positions_coverage 1 4 50 50 820.0 3.00e-03 0.0840000 ns 1.3496296 1, 4 2 4 1.4171111 p = 0.084 unique_start_positions_coverage 1 8 50 50 659.5 4.35e-05 0.0012180 ** 1.4533333 1, 8 2 5 1.5260000 p = 0.001218 unique_start_positions_coverage 1 15 50 50 249.0 0.00e+00 0.0000000 **** 1.5570370 1 , 15 2 6 1.6348889 p &lt; 1e-04 unique_start_positions_coverage 1 30 50 50 33.0 0.00e+00 0.0000000 **** 1.6607407 1 , 30 2 7 1.7437778 p &lt; 1e-04 unique_start_positions_coverage 1 60 50 50 78.5 0.00e+00 0.0000000 **** 1.7644444 1 , 60 2 8 1.8526667 p &lt; 1e-04 unique_start_positions_coverage 2 4 50 50 1275.0 8.65e-01 1.0000000 ns 1.8681481 2, 4 3 4 1.9615556 p = 1 unique_start_positions_coverage 2 8 50 50 1124.5 3.86e-01 1.0000000 ns 1.9718519 2, 8 3 5 2.0704444 p = 1 unique_start_positions_coverage 2 15 50 50 631.0 1.84e-05 0.0005152 *** 2.0755556 2 , 15 3 6 2.1793333 p = 0.0005152 unique_start_positions_coverage 2 30 50 50 169.0 0.00e+00 0.0000000 **** 2.1792593 2 , 30 3 7 2.2882222 p &lt; 1e-04 unique_start_positions_coverage 2 60 50 50 325.0 0.00e+00 0.0000000 **** 2.2829630 2 , 60 3 8 2.3971111 p &lt; 1e-04 unique_start_positions_coverage 4 8 50 50 1074.5 2.25e-01 1.0000000 ns 2.3866667 4, 8 4 5 2.5060000 p = 1 unique_start_positions_coverage 4 15 50 50 576.5 3.10e-06 0.0000874 **** 2.4903704 4 , 15 4 6 2.6148889 p &lt; 1e-04 unique_start_positions_coverage 4 30 50 50 126.5 0.00e+00 0.0000000 **** 2.5940741 4 , 30 4 7 2.7237778 p &lt; 1e-04 unique_start_positions_coverage 4 60 50 50 270.0 0.00e+00 0.0000000 **** 2.6977778 4 , 60 4 8 2.8326667 p &lt; 1e-04 unique_start_positions_coverage 8 15 50 50 702.0 1.47e-04 0.0041160 ** 2.8014815 8 , 15 5 6 2.9415556 p = 0.004116 unique_start_positions_coverage 8 30 50 50 214.0 0.00e+00 0.0000000 **** 2.9051852 8 , 30 5 7 3.0504444 p &lt; 1e-04 unique_start_positions_coverage 8 60 50 50 367.5 0.00e+00 0.0000000 **** 3.0088889 8 , 60 5 8 3.1593333 p &lt; 1e-04 unique_start_positions_coverage 15 30 50 50 453.5 0.00e+00 0.0000010 **** 3.1125926 15, 30 6 7 3.2682222 p &lt; 1e-04 unique_start_positions_coverage 15 60 50 50 783.0 1.00e-03 0.0280000 3.2162963 15, 60 6 8 3.3771111 p = 0.028 unique_start_positions_coverage 30 60 50 50 1739.5 6.96e-04 0.0194880 3.3200000 30, 60 7 8 3.4860000 p = 0.019488 13.6 Manuscript figures legend &lt;- cowplot::get_legend( elite_ave_performance_fig + guides( color=guide_legend(nrow=1), fill=guide_legend(nrow=1) ) + theme( legend.position = &quot;bottom&quot;, legend.box=&quot;horizontal&quot;, legend.justification=&quot;center&quot; ) ) grid &lt;- plot_grid( elite_ave_performance_fig + ggtitle(&quot;Performance over time&quot;) + theme(legend.position=&quot;none&quot;), elite_final_performance_fig + ggtitle(&quot;Final performance&quot;) + theme(), unique_start_position_coverage_fig + ggtitle(&quot;Activation position coverage over time&quot;) + theme(legend.position=&quot;none&quot;), unique_start_positions_coverage_final_fig + ggtitle(&quot;Final activation position coverage&quot;) + theme(), nrow=2, ncol=2, rel_widths=c(3,2), labels=&quot;auto&quot; ) grid &lt;- plot_grid( grid, legend, nrow=2, ncol=1, rel_heights=c(1, 0.1) ) save_plot( paste(working_directory, &quot;imgs/novelty-panel.pdf&quot;, sep=&quot;&quot;), grid, base_width=12, base_height=8 ) grid "],["references.html", "References", " References "]]
